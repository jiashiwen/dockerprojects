<?php namespace {function C($name=null, $value=null,$default=null) { static $_config = array(); if (empty($name)) { return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtoupper($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : $default; $_config[$name] = $value; return null; } $name = explode('.', $name); $name[0] = strtoupper($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : $default; $_config[$name[0]][$name[1]] = $value; return null; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name,CASE_UPPER)); return null; } return null; } function load_config($file,$parse=CONF_PARSE){ $ext = pathinfo($file,PATHINFO_EXTENSION); switch($ext){ case 'php': return include $file; case 'ini': return parse_ini_file($file); case 'yaml': return yaml_parse_file($file); case 'xml': return (array)simplexml_load_file($file); case 'json': return json_decode(file_get_contents($file), true); default: if(function_exists($parse)){ return $parse($file); }else{ E(L('_NOT_SUPPORT_').':'.$ext); } } } if (!function_exists('yaml_parse_file')) { function yaml_parse_file($file) { vendor('spyc.Spyc'); return Spyc::YAMLLoad($file); } } function E($msg, $code=0) { throw new Think\Exception($msg, $code); } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } return null; } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)){ return isset($_lang[$name]) ? $_lang[$name] : $name; }elseif(is_array($value)){ $replace = array_keys($value); foreach($replace as &$v){ $v = '{$'.$v.'}'; } return str_replace($replace,$value,isset($_lang[$name]) ? $_lang[$name] : $name); } $_lang[$name] = $value; return null; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return null; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { return Think\Think::trace($value,$label,$level,$record); } function compile($filename) { $content = php_strip_whitespace($filename); $content = trim(substr($content, 5)); $content = preg_replace('/\/\/\[RUNTIME\](.*?)\/\/\[\/RUNTIME\]/s', '', $content); if(0===strpos($content,'namespace')){ $content = preg_replace('/namespace\s(.*?);/','namespace \\1{',$content,1); }else{ $content = 'namespace {'.$content; } if ('?>' == substr($content, -2)) $content = substr($content, 0, -2); return $content.'}'; } function T($template='',$layer=''){ if(false === strpos($template,'://')){ $template = 'http://'.str_replace(':', '/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $module = isset($info['user'])?$info['user'].'/':MODULE_NAME.'/'; $extend = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); $auto = C('AUTOLOAD_NAMESPACE'); if($auto && isset($auto[$extend])){ $baseUrl = $auto[$extend].$module.$layer.'/'; }elseif(C('VIEW_PATH')){ $baseUrl = C('VIEW_PATH'); }elseif(defined('TMPL_PATH')){ $baseUrl = TMPL_PATH.$module; }else{ $baseUrl = APP_PATH.$module.$layer.'/'; } $theme = substr_count($file,'/')<2 ? C('DEFAULT_THEME') : ''; $depr = C('TMPL_FILE_DEPR'); if('' == $file) { $file = CONTROLLER_NAME . $depr . ACTION_NAME; }elseif(false === strpos($file, '/')){ $file = CONTROLLER_NAME . $depr . $file; }elseif('/' != $depr){ $file = substr_count($file,'/')>1 ? substr_replace($file,$depr,strrpos($file,'/'),1) : str_replace('/', $depr, $file); } return $baseUrl.($theme?$theme.'/':'').$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null,$datas=null) { static $_PUT = null; if(strpos($name,'/')){ list($name,$type) = explode('/',$name,2); }elseif(C('VAR_AUTO_STRING')){ $type = 's'; } if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } if ( IS_CLI ) { $argv = array_slice($_SERVER['argv'], 2); foreach ( $argv as $i => $arg ) { $arg = explode('=', $arg, 2); $_GET[trim($arg[0])] = isset($arg[1]) ? trim($arg[1]) : ''; } } switch(strtolower($method)) { case 'get' : $input =& $_GET; break; case 'post' : $input =& $_POST; break; case 'put' : if(is_null($_PUT)){ parse_str(file_get_contents('php://input'), $_PUT); } $input = $_PUT; break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': if(is_null($_PUT)){ parse_str(file_get_contents('php://input'), $_PUT); } $input = $_PUT; break; default: $input = $_GET; } break; case 'path' : $input = array(); if(!empty($_SERVER['PATH_INFO'])){ $depr = C('URL_PATHINFO_DEPR'); $input = explode($depr,trim($_SERVER['PATH_INFO'],$depr)); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; case 'data' : $input =& $datas; break; default: return null; } if(''==$name) { $data = $input; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { if(is_string($filters)){ $filters = explode(',',$filters); } foreach($filters as $filter){ $data = array_map_recursive($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { if(is_string($filters)){ if(0 === strpos($filters,'/')){ if(1 !== preg_match($filters,(string)$data)){ return isset($default) ? $default : null; } }else{ $filters = explode(',',$filters); } }elseif(is_int($filters)){ $filters = array($filters); } if(is_array($filters)){ foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data) ? array_map_recursive($filter,$data) : $filter($data); }else{ $data = filter_var($data,is_int($filter) ? $filter : filter_id($filter)); if(false === $data) { return isset($default) ? $default : null; } } } } } if(!empty($type)){ switch(strtolower($type)){ case 'a': $data = (array)$data; break; case 'd': $data = (int)$data; break; case 'f': $data = (float)$data; break; case 'b': $data = (boolean)$data; break; case 's': default: $data = (string)$data; } } }else{ $data = isset($default)?$default:null; } is_array($data) && array_walk_recursive($data,'think_filter'); return $data; } function array_map_recursive($filter, $data) { $result = array(); foreach ($data as $key => $val) { $result[$key] = is_array($val) ? array_map_recursive($filter, $val) : call_user_func($filter, $val); } return $result; } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)){ return $_num[$key]; }else{ $_num[$key] = $_num[$key] + (int)$step; } if(false !== $save){ S('N_'.$key,$_num[$key],$save); } return null; } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace_callback('/_([a-zA-Z])/', function($match){return strtoupper($match[1]);}, $name)); } else { return strtolower(trim(preg_replace("/[A-Z]/", "_\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && APP_DEBUG) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext=EXT) { static $_file = array(); $class = str_replace(array('.', '#'), array('/', '.'), $class); if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('/', $class); if (empty($baseUrl)) { if ('@' == $class_strut[0] || MODULE_NAME == $class_strut[0]) { $baseUrl = MODULE_PATH; $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); }elseif ('Common' == $class_strut[0]) { $baseUrl = COMMON_PATH; $class = substr($class, 7); }elseif (in_array($class_strut[0],array('Think','Org','Behavior','Com','Vendor')) || is_dir(LIB_PATH.$class_strut[0])) { $baseUrl = LIB_PATH; }else { $baseUrl = APP_PATH; } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } return null; } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@/')) { $baseUrl = MODULE_PATH.'Common/'; $name = substr($name, 2); } else { $array = explode('/', $name); $baseUrl = APP_PATH . array_shift($array).'/Common/'; $name = implode('/',$array); } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function D($name='',$layer='',$module='Common') { if(empty($name)) return new Think\Model; static $_model = array(); $layer = $layer? : C('DEFAULT_M_LAYER'); if(isset($_model[$name.$layer])) return $_model[$name.$layer]; $class = parse_res_name($name,$layer); if(class_exists($class)) { $model = new $class(basename($name)); }elseif(false === strpos($name,'/')){ if(!C('APP_USE_NAMESPACE')){ import('Common/'.$layer.'/'.$class); }else{ if ( !in_array($module, array('Common', '')) && defined('BIND_MODULE') && constant('BIND_MODULE')!='' ) { $module = BIND_MODULE; } $class = '\\'.$module.'\\'.$layer.'\\'.$name.$layer; } $model = class_exists($class)? new $class($name) : new Think\Model($name); }else { Think\Log::record('D方法实例化没找到模型类'.$class,Think\Log::NOTICE); $model = new Think\Model(basename($name)); } $_model[$name.$layer] = $model; return $model; } function K($name='',$layer='') { if(empty($name) || empty($layer)) return false; static $_model = array(); if(isset($_model[$name.$layer])) return $_model[$name.$layer]; $class = parse_res_name($name,$layer); if(class_exists($class)) { $model = new $class(basename($name)); }elseif(false === strpos($name,'/')){ if(!C('APP_USE_NAMESPACE')){ import('Common/'.$layer.'/'.$class); }else{ $class = '\\Common\\'.$layer.'\\'.$name.$layer; } $model = class_exists($class)? new $class($name) : new Think\Model($name); }else { Think\Log::record('D方法实例化没找到模型类'.$class,Think\Log::NOTICE); $model = new Think\Model(basename($name)); } $_model[$name.$layer] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Think\\Model'; } $guid = (is_array($connection)?implode('',$connection):$connection).$tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function parse_res_name($name,$layer,$level=1){ if(strpos($name,'://')) { list($extend,$name) = explode('://',$name); }else{ $extend = ''; } if(strpos($name,'/') && substr_count($name, '/')>=$level){ list($module,$name) = explode('/',$name,2); }else{ $module = defined('MODULE_NAME') ? MODULE_NAME : '' ; } $array = explode('/',$name); if(!C('APP_USE_NAMESPACE')){ $class = parse_name($name, 1); import($module.'/'.$layer.'/'.$class.$layer); }else{ $class = $module.'\\'.$layer; foreach($array as $name){ $class .= '\\'.parse_name($name, 1); } if($extend){ $class = $extend.'\\'.$class; } } return $class.$layer; } function controller($name,$path=''){ $layer = C('DEFAULT_C_LAYER'); if(!C('APP_USE_NAMESPACE')){ $class = parse_name($name, 1).$layer; import(MODULE_NAME.'/'.$layer.'/'.$class); }else{ $class = ( $path ? basename(ADDON_PATH).'\\'.$path : MODULE_NAME ).'\\'.$layer; $array = explode('/',$name); foreach($array as $name){ $class .= '\\'.parse_name($name, 1); } $class .= $layer; } if(class_exists($class)) { return new $class(); }else { return false; } } function A($name,$layer='',$level=0) { static $_action = array(); $layer = $layer? : C('DEFAULT_C_LAYER'); $level = $level? : ($layer == C('DEFAULT_C_LAYER')?C('CONTROLLER_LEVEL'):1); if(isset($_action[$name.$layer])) return $_action[$name.$layer]; $class = parse_res_name($name,$layer,$level); if(class_exists($class)) { $action = new $class(); $_action[$name.$layer] = $action; return $action; }else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function tag($tag, &$params=NULL) { \Think\Hook::listen($tag,$params); } function B($name, $tag='',&$params=NULL) { if(''==$tag){ $name .= 'Behavior'; } return \Think\Hook::exec($name,$tag,$params); } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function throw_exception($msg, $type='Think\\Exception', $code=0) { Think\Log::record('建议使用E方法替代throw_exception',Think\Log::NOTICE); if (class_exists($type, false)) throw new $type($msg, $code); else Think\Think::halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('/\]\=\>\n(\s+)/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { $rule = is_array($rule)?$rule[0]:$rule; if(false === strpos($key,'*') && 0=== strpos($url,$rule)) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule)); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); $urlCase = C('URL_CASE_INSENSITIVE'); if($url) { if(0=== strpos($url,'/')) { $route = true; $url = substr($url,1); if('/' != $depr) { $url = str_replace('/',$depr,$url); } }else{ if('/' != $depr) { $url = str_replace('/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $varModule = C('VAR_MODULE'); $varController = C('VAR_CONTROLLER'); $varAction = C('VAR_ACTION'); $var[$varAction] = !empty($path)?array_pop($path):ACTION_NAME; $var[$varController] = !empty($path)?array_pop($path):CONTROLLER_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[$varController])])) { $maps = $maps[strtolower($var[$varController])]; if($action = array_search(strtolower($var[$varAction]),$maps)){ $var[$varAction] = $action; } } } if($maps = C('URL_CONTROLLER_MAP')) { if($controller = array_search(strtolower($var[$varController]),$maps)){ $var[$varController] = $controller; } } if($urlCase) { $var[$varController] = parse_name($var[$varController]); } $module = ''; if(!empty($path)) { $var[$varModule] = implode($depr,$path); }else{ if(C('MULTI_MODULE')) { if(MODULE_NAME != C('DEFAULT_MODULE') || !C('MODULE_ALLOW_LIST')){ $var[$varModule]= MODULE_NAME; } } } if($maps = C('URL_MODULE_MAP')) { if($_module = array_search(strtolower($var[$varModule]),$maps)){ $var[$varModule] = $_module; } } if(isset($var[$varModule])){ $module = $var[$varModule]; unset($var[$varModule]); } } } if(C('URL_MODEL') == 0) { $url = __APP__.'?'.C('VAR_MODULE')."={$module}&".http_build_query(array_reverse($var)); if($urlCase){ $url = strtolower($url); } if(!empty($vars)) { $vars = http_build_query($vars); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'/'.rtrim($url,$depr); }else{ $module = (defined('BIND_MODULE') && BIND_MODULE==$module )? '' : $module; $url = __APP__.'/'.($module?$module.MODULE_PATHINFO_DEPR:'').implode($depr,array_reverse($var)); } if($urlCase){ $url = strtolower($url); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https://':'http://').$domain.$url; } return $url; } function W($name, $data=array()) { return R($name,$data,'Widget'); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\n", "\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options)){ $type = isset($options['type'])?$options['type']:''; $cache = Think\Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Think\Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Think\Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { if(false !== strpos($name,'*')){ return false; }else{ unset($_cache[$name]); return Think\Storage::unlink($filename,'F'); } } else { Think\Storage::put($filename,serialize($value),'F'); $_cache[$name] = $value; return null; } } if (isset($_cache[$name])) return $_cache[$name]; if (Think\Storage::has($filename,'F')){ $value = unserialize(Think\Storage::read($filename,'F')); $_cache[$name] = $value; } else { $value = false; } return $value; } function to_guid_string($mix) { if (is_object($mix)) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\"{$value}\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\"1.0\" encoding=\"{$encoding}\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "</{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\"{$key}\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "</{$key}>"; } return $xml; } function session($name='',$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } if('common' == APP_MODE){ ini_set('session.auto_start', 0); } if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) { ini_set('session.gc_maxlifetime', $name['expire']); ini_set('session.cookie_lifetime', $name['expire']); } if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $type = C('SESSION_TYPE'); $class = strpos($type,'\\')? $type : 'Think\\Session\\Driver\\'. ucwords(strtolower($type)); $hander = new $class(); session_set_save_handler( array(&$hander,"open"), array(&$hander,"close"), array(&$hander,"read"), array(&$hander,"write"), array(&$hander,"destroy"), array(&$hander,"gc")); } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(''===$name){ return $prefix ? $_SESSION[$prefix] : $_SESSION; }elseif(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); if($prefix){ unset($_SESSION[$prefix][$name1][$name2]); }else{ unset($_SESSION[$name1][$name2]); } }else{ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); if($prefix){ $_SESSION[$prefix][$name1][$name2] = $value; }else{ $_SESSION[$name1][$name2] = $value; } }else{ if($prefix){ $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } return null; } function cookie($name='', $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), 'secure' => C('COOKIE_SECURE'), 'httponly' => C('COOKIE_HTTPONLY'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if(!empty($config['httponly'])){ ini_set("session.cookie_httponly", 1); } if (is_null($name)) { if (empty($_COOKIE)) return null; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain'],$config['secure'],$config['httponly']); unset($_COOKIE[$key]); } } } return null; }elseif('' === $name){ return $_COOKIE; } $name = $config['prefix'] . str_replace('.', '_', $name); if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain'],$config['secure'],$config['httponly']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain'],$config['secure'],$config['httponly']); $_COOKIE[$name] = $value; } } return null; } function load_ext_file($path) { if($files = C('LOAD_EXT_FILE')) { $files = explode(',',$files); foreach ($files as $file){ $file = $path.'Common/'.$file.'.php'; if(is_file($file)) include $file; } } if($configs = C('LOAD_EXT_CONFIG')) { if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = is_file($config)? $config : $path.'Conf/'.$config.CONF_EXT; if(is_file($file)) { is_numeric($key)?C(load_config($file)):C($key,load_config($file)); } } } } function get_client_ip($type = 0,$adv=false) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if($adv){ if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); return $_status[$code]; } } function think_filter(&$value){ if(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i',$value)){ $value .= ' '; } } function in_array_case($value,$array){ return in_array(strtolower($value),array_map('strtolower',$array)); }}namespace {function pager ( $page, $total, $pagesize, $opts=array() ) { $_totalpage = intval(ceil($total/$pagesize)); $pager = array( 'page' => $page, 'pagesize' => $pagesize, 'total' => intval($total), 'count' => $_totalpage, 'prev' => ( $page > 1 ) ? $page-1 : 1, 'next' => ( $page < $_totalpage ) ? $page+1 : $_totalpage, 'first' => 1, 'last' => $_totalpage, 'list' => array(), 'template' => isset($opts['linkstring']) ? $opts['linkstring'] : '#', 'spline' => isset($opts['spline']) ? $opts['spline'] : '...', ); $opts['number'] = isset($opts['number']) ? intval($opts['number']) : 5; $opts['number'] = in_array($opts['number'], array(5,7,9) ) ? $opts['number'] : 5; $_fix = ( $opts['number'] + 1 ) / 2 - 1; isset($opts['var']) && $pager['var'] = $opts['var']; isset($opts['jump']) && $pager['jump'] = !!$opts['jump']; isset($opts['linkopts']) && $pager['linkopts'] = $opts['linkopts']; $_start = $page - $_fix; $_end = $page + $_fix; if ( $_totalpage > $opts['number'] ) { if ( $page > $_fix + 1 ) { $pager['sp_before'] = true; } if ( $page < $_totalpage - $_fix ) { $pager['sp_after'] = true; } } if ( $page < $_fix + 1 ) { $_end = ( $_totalpage < $opts['number'] ) ? $_totalpage : $opts['number']; } if ( $page > $_totalpage - $_fix ) { $_start = ( $_totalpage < $opts['number'] ) ? 1 : $_totalpage - $opts['number']; } $_start = ( $_start < 1 ) ? 1 : $_start; $_end = ( $_end > $_totalpage ) ? $_totalpage : $_end; if ( $page > $_totalpage ) { $pager['page'] = $_totalpage; } $_opts_filter = array('first', 'last', 'prev', 'next'); foreach ( $_opts_filter as $_i => $_opt ) { if ( !isset($opts[$_opt]) || $opts[$_opt]==false ) { unset($pager[$_opt]); } else { if ($_totalpage > 1) { if ($page == 1 && in_array($_opt,array('first','prev'))) { $pager[$_opt] = 'javascript:;'; } elseif ($_totalpage == $page && in_array($_opt,array('last','next'))) { $pager[$_opt] = 'javascript:;'; } else { $pager[$_opt] = str_replace('#', $pager[$_opt], $pager['template']); } } else { $pager[$_opt] = 'javascript:;'; } } } for ( $_idx=$_start; $_idx<=$_end; $_idx++ ) { array_push($pager['list'], array( 'num' => $_idx, 'url' => str_replace('#', $_idx, $pager['template']), )); } return $pager; } function formatQATimer( $time=NOW_TIME ) { $year_ts = strtotime(date('Y-01-01 00:00:00', NOW_TIME)); if ( $time < $year_ts ) { $result = date('Y年m月d日', $time); } else { $ago_var = NOW_TIME - $time; if ( $ago_var < 60 ) { $result = '刚刚'; } else if ( $ago_var < 3600 ) { $result = intval($ago_var/60).'分钟之前'; } else if ( $ago_var < 43200 ) { $result = intval($ago_var/3600).'小时之前'; } else { $result = date('m月d日', $time); } } return $result; } function formatQASearchTitle ($string='', $find='') { if ( trim($string)=='' || trim($find)=='' ) { return $string; } $result = str_replace($find, '<em>'.$find.'</em>', $string); return $result; } function formatUsernick( $usernick='', $anonymous=0, $default='乐居网友' ) { $usernick = trim($usernick); $anonymous = intval($anonymous); if ( $anonymous ) { $result = '匿名网友'; } else { $result = $usernick == '' ? $default : $usernick; } return $result; } function autofit ( $jump = false, $type='baike' ) { if ( !isset($_SERVER['HTTP_USER_AGENT']) || !$jump ) { return false; } $useragent = $_SERVER['HTTP_USER_AGENT']; $origin_host = $_SERVER['HTTP_HOST']; $origin_url = $_SERVER['REQUEST_URI']; $detected = preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i',$useragent)||preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i',substr($useragent,0,4)); $device = 'pc'; if( $detected ) { $device = 'touch'; } else { $device = 'pc'; } $target = url('index', array(), $device, $type); $target_host = substr($target, 7, -1); if ( $origin_host !== $target_host ) { $detected = true; $target = 'http://' . $target_host . $origin_url; if ( $jump!==false ) { header('Location: '.$target); exit; } } return $target; } function getCookieLocation ( $device='pc' ) { $ip = get_client_ip(); $default = array( 'city_cn'=>'北京', 'city_en'=>'bj', 'ip'=>$ip ); if ( $device=='pc' ) { $city_en = strtolower(trim(cookie('M_CITY'))); } else { $city_en = strtolower(trim(cookie('B_CITY'))); } if ( $city_en=='bj' ) { return $default; } $cities = C('CITIES.ALL'); if (!array_key_exists($city_en, $cities) ) { $ret = $default; } else { $ret['city_cn'] = $cities[$city_en]['cn']; $ret['city_en'] = $city_en; $ret['ip'] = $ip; } return $ret; } function getIPLocation($ip, $default=array()) { if ( empty($default) ) { $default = array( 'city_cn'=>'北京', 'city_en'=>'bj' ); } $default['ip'] = $ip; if ($ip=='127.0.0.1') { return $default; } $api = 'http://ip.house.sina.com.cn/iplookup.php'; $data = array('ip'=>$ip); $return = curl_get($api, $data); if ($return['status'] ) { $result = json_decode($return['result'], true); $city_en = $result['info']['city_en']; if ($result['info']['city']!='' ) { $result = $result['info']['city']; } else if ($result['info']['country']!='' ) { $result = $result['info']['country']; } else if ($result['info']['province']!='' ) { $result = $result['info']['province']; } else { $result = $result['area']; } $cities = C('CITIES.ALL'); if (!array_key_exists($city_en, $cities) ) { $ret = $default; } else { $ret['city_cn'] = $result; $ret['city_en'] = $city_en; } } else { $ret = $default; } $ret['ip'] = $ip; return $ret; } function getMemberInfo( $uid ) { $uid = intval($uid); if ( $uid<=0 ) { return false; } $token = sha1(crypt("&{$uid}",'BiOnline')); $uid = base64_encode(substr(md5($uid),0,8).base64_encode($uid).substr(md5($uid),10,4)); $api = 'http://my.leju.com/web/sso/userinfo'; $data = array('u'=>$uid, 'token'=>$token); $result = curl_post($api, $data); if ( $result['status']==true ) { return json_decode($result['result'], true); } else { return false; } } function fetchChinese( $str ) { $ret = preg_match_all("/[\x{4e00}-\x{9fff}]+/u", $str, $matches); if ( $ret===0 ) { return false; } $str = implode('', $matches[0]); return $str; } function getHotTags( $num=10, $day=7) { $url = 'http://admin.tag.leju.com/api/api/get_tags_with_click'; $q = array( 'key' => '5ed33f7008771c9d49e3716aeaeca581', 'day' => $day, 'limit' => $num, 'own' => 'true', ); $ret = curl_get($url, $q); $result = array(); if ( $ret['status'] ) { $ret = json_decode($ret['result'], true); $result = $ret['data']['tags']; } return $result; } function curl_get($url, $data = array(), $header = array(), $timeout = 5, $port = 80) { $ch = curl_init(); if (!empty($data)) { $data = is_array($data)?http_build_query($data): $data; $url .= (strpos($url,'?')? '&': "?") . $data; } curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); curl_setopt($ch, CURLOPT_POST, 0); curl_setopt($ch, CURLOPT_HTTPHEADER, $header); $result = array('status'=>true); $result['result'] = curl_exec($ch); if (0 != curl_errno($ch)) { $result['status'] = false; $result['error'] = curl_error($ch); $result['code'] = curl_errno($ch); } curl_close($ch); return $result; } function curl_post($url, $data = array(), $header = array(), $timeout = 5, $port = 80) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); !empty ($header) && curl_setopt($ch, CURLOPT_HTTPHEADER, $header); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); if ( is_array($data) ) { } if ( is_string($data) && !empty($data) && substr($data, 0, 1)=='{' && json_decode($data, true) ) { curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json')); } $result = array('status'=>true); $result['result'] = curl_exec($ch); if (0 != curl_errno($ch)) { $result['status'] = false; $result['error'] = curl_error($ch); $result['code'] = curl_errno($ch); } curl_close($ch); return $result; } function encode($str) { $str_encode = base64_encode(substr(md5($str),10,6).base64_encode($str).substr(md5($str),20,6)); return $str_encode; } function decode($str) { $str_decode = base64_decode(substr(base64_decode($str),6,-6)); return $str_decode; } function abslength($str) { if(empty($str)){ return 0; } if(function_exists('mb_strlen')){ return mb_strlen($str,'utf-8'); } else { preg_match_all("/./u", $str, $ar); return count($ar[0]); } } function chineseLength( $str,$charset='utf-8' ){ if($charset=='utf-8') { $str = iconv('utf-8','gb2312//TRANSLIT', $str); } $num = strlen($str); $cnNum = 0; for ( $i=0; $i<$num; $i++ ) { if ( ord(substr($str,$i+1,1))>127 ){ $cnNum++; $i++; } } $enNum = $num-($cnNum*2); $number = ($enNum/2)+$cnNum; return ceil($number); } function set_ajax_output($out_header=false) { if ( !defined('AJAX_OUTPUT') ) { define('AJAX_OUTPUT', true); } if ( $out_header ) { header('Content-Type: text/json'); } return true; } function set_xml_output($out_header=false) { if ( !defined('AJAX_OUTPUT') ) { define('AJAX_OUTPUT', true); } if ( $out_header ) { header('Content-Type: text/xml;'); } return true; } function ajax_succ($info = '') { set_ajax_output(true); die( json_encode( array( 'status' => 'succ', 'info' => $info, ) ) ); } function ajax_error($reason = '') { set_ajax_output(true); die( json_encode( array( 'status' => 'fail', 'reason' => $reason, ) ) ); } function debug($msg, $ret=null, $mode='full', $_debug=false) { if ( $_debug===false ) { $_debug = defined('APP_DEBUG') ? constant('APP_DEBUG') : false; } if ( $_debug === true ) { $debug = array( 'code' => 'DEBUG', 'msg' => &$msg, ); if ( $ret ) { if ( $mode == false ) { $debug['trace'] = false; } else { $trace = debug_backtrace(); if ( $mode == 'lite' ) { array_shift($trace); $filters = array( 'file'=>'','line'=>'', 'function'=>'','class'=>'', 'type'=>'', ); foreach ( $trace as $i => &$item ) { $item = array_intersect_key($item, $filters); } } $debug['trace'] = &$trace; } $debug['ret'] = &$ret; } \Think\Log::record(var_export($debug, true)); } return true; } function getDayTime() { $begin = strtotime(date('Y-m-d',strtotime('-1 day'))); $end = strtotime(date('Y-m-d',time())) - 1; return array('begin'=>$begin,'end'=>$end); } function changeImageSize($img, $width, $height, $type='smart') { $types = array( 'smart' => 'cm:WIDTH:X:HEIGHT:', 'scale' => 's:WIDTH:X:HEIGHT:', ); if ( !array_key_exists($type, $types) ) { return false; } $hosts = array( 'src.leju.com', ); $info = parse_url($img); $img_domain = isset($info['host']) ? $info['host'] : ''; if ( !in_array($img_domain, $hosts) ) { return $img; } $info = explode('_', $img); $base = array(array_shift($info)); $ext = explode('.', array_pop($info)); array_push($info, $ext[0]); $ext = count($ext)>0 ? array_pop($ext) : false; $retains = array('p', 'mk', 'os', 'c', 's', 'rt'); foreach ( $info as $_i => $seg ) { foreach ( $retains as $_r => $key ) { $len = strlen($key); if ( $key == substr($seg, 0, $len) ) { array_push($base, $seg); unset($retains[$_r]); } } } $current_type = $types[$type]; $placeholder = array(':WIDTH:', ':HEIGHT:'); $replace_set = array(strval($width), strval($height)); array_push($base, str_replace($placeholder, $replace_set, $current_type)); $result = implode('_', $base) . ( $ext ? '.'.$ext : ''); return $result; } function changeImagesSize($content, $width, $height, $type='smart') { $pattern = '/<img\s*.*src="(?P<img>http:\/\/src\.leju\.com\/.+)"\s*.*>/U'; $ret = preg_match_all($pattern, $content, $matches, PREG_SET_ORDER); if ( count($matches) > 0 ) { $_holder = $_replace = array(); foreach ( $matches as $_i => $match ) { if ( !isset($match['img']) ) { continue; } $new = changeImageSize($match['img'], $width, $height, $type); if ( !$new ) { continue; } array_push($_holder, $match['img']); array_push($_replace, $new); } $content = str_replace($_holder, $_replace, $content); } return $content; } function getMore($city = null) { if(empty($city)) { $city = cookie('B_CITY') ? cookie('B_CITY') : 'bj'; } $return = array( 'news' => "http://m.leju.com/touch/news/s/{$city}/toutiao/", 'house' => "http://m.leju.com/house/{$city}/s/" ); return $return; } function setCorss ( $origin = '*' ) { $request_method = strtoupper($_SERVER['REQUEST_METHOD']); if ($request_method === 'OPTIONS') { header('Access-Control-Allow-Origin: '.$origin); header('Access-Control-Allow-Credentials: true'); header('Access-Control-Allow-Methods: GET, POST, OPTIONS'); header('Access-Control-Allow-Headers: APPID, SECRET, TOKEN'); header('Access-Control-Max-Age: 1728000'); header('Content-Type: text/plain charset=UTF-8'); header('Content-Length: 0',true); header('status: 204'); header('HTTP/1.0 204 No Content'); } if ($request_method === 'POST') { header('Access-Control-Allow-Origin: '.$origin); header('Access-Control-Allow-Credentials: true'); header('Access-Control-Allow-Methods: GET, POST, OPTIONS'); } if ($request_method === 'GET') { header('Access-Control-Allow-Origin: '.$origin); header('Access-Control-Allow-Credentials: true'); header('Access-Control-Allow-Methods: GET, POST, OPTIONS'); } return true; } function clear_all($area_str){ if ($area_str!=''){ $area_str = trim($area_str); $area_str = strip_tags($area_str,""); $area_str = str_replace("&nbsp;","",$area_str); $area_str = preg_replace("/   /","",$area_str); $area_str = preg_replace("/
/","",$area_str); $area_str = preg_replace("/
/","",$area_str); $area_str = preg_replace("/
/","",$area_str); $area_str = preg_replace("/ /","",$area_str); $area_str = preg_replace("/  /","",$area_str); $area_str = trim($area_str); } return $area_str; } function filterInput(&$str){ $str = preg_replace('/[\[\]<>,\.\'"\(\)]|(alert)|select|(update)|(delete)|(insert)/i', '', $str); return $str; } function mystrcut ( $string , $length , $etc = '...' ) { $result = ''; $string = html_entity_decode( trim( strip_tags( $string ) ) , ENT_QUOTES , 'UTF-8' ); $strlen = strlen( $string ); for ( $i = 0; (($i < $strlen) && ($length > 0) ); $i++ ) { $number = strpos( str_pad( decbin( ord( substr( $string , $i , 1 ) ) ) , 8 , '0' , STR_PAD_LEFT ) , '0' ); if ( $number ) { if ( $length < 1.0 ) { break; } $result .= substr( $string , $i , $number ); $length -= 1.0; $i += $number - 1; } else { $result .= substr( $string , $i , 1 ); $length -= 0.5; } } $result = htmlspecialchars( $result , ENT_QUOTES , 'UTF-8' ); if ( $i < $strlen ) { $result .= $etc; } return $result; } function clean_xss ( $html ) { $html=trim($html); $pattern=array( "'<\?php[^>]*[\?>]?'si", "'<script[^>]*?>.*?</script>'si", "'<style[^>]*?>.*?</style>'si", "'<frame[^>]*?>'si", "'<iframe[^>]*?>.*?</iframe>'si", "'<link[^>]*?>'si", ); $replace = array_fill(0, count($pattern), ''); return preg_replace($pattern,$replace,$html); } function vaild_datestr ( $dtstr, $format='Y-m-d H:i:s', $offset=false ) { $time = strtotime($dtstr); if ( $time ) { if ( $offset !== false ) { $time = strtotime($offset, $time); } $time = date($format, $time); } return $time; } function url( $page='index', $opts=array(), $type='touch', $mod='baike', $detected=false ) { $detected = true; $default = '#'; $url = \Common\Logic\UrlLogic::getInstance($detected); $action = $type.ucfirst($mod).ucfirst($page); $type = $type=='pc' ? 'pc' : 'touch'; $R = $url->setBase($type, $mod); if ( method_exists($url, $action) ) { } $href = call_user_func_array(array($url, $action), $opts); return $href; } function actMsg( $record ) { $logger = D('Adminlogs', 'Model', 'Common'); return $logger->helper($record); } if ( !function_exists('fastcgi_finish_request') ) { function fastcgi_finish_request() {} }}namespace Think{ class Hook { static private $tags = array(); static public function add($tag,$name) { if(!isset(self::$tags[$tag])){ self::$tags[$tag] = array(); } if(is_array($name)){ self::$tags[$tag] = array_merge(self::$tags[$tag],$name); }else{ self::$tags[$tag][] = $name; } } static public function import($data,$recursive=true) { if(!$recursive){ self::$tags = array_merge(self::$tags,$data); }else{ foreach ($data as $tag=>$val){ if(!isset(self::$tags[$tag])) self::$tags[$tag] = array(); if(!empty($val['_overlay'])){ unset($val['_overlay']); self::$tags[$tag] = $val; }else{ self::$tags[$tag] = array_merge(self::$tags[$tag],$val); } } } } static public function get($tag='') { if(empty($tag)){ return self::$tags; }else{ return self::$tags[$tag]; } } static public function listen($tag, &$params=NULL) { if(isset(self::$tags[$tag])) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach (self::$tags[$tag] as $name) { APP_DEBUG && G($name.'_start'); $result = self::exec($name, $tag,$params); if(APP_DEBUG){ G($name.'_end'); trace('Run '.$name.' [ RunTime:'.G($name.'_start',$name.'_end',6).'s ]','','INFO'); } if(false === $result) { return ; } } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } } return; } static public function exec($name, $tag,&$params=NULL) { if('Behavior' == substr($name,-8) ){ $tag = 'run'; } $addon = new $name(); return $addon->$tag($params); } }}namespace Think{ class App { static public function init() { load_ext_file(COMMON_PATH); C('LOG_PATH', realpath(LOG_PATH).'/Common/'); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : 'GET'); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); Dispatcher::dispatch(); if(C('REQUEST_VARS_FILTER')){ array_walk_recursive($_GET, 'think_filter'); array_walk_recursive($_POST, 'think_filter'); array_walk_recursive($_REQUEST, 'think_filter'); } Hook::listen('url_dispatch'); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('/^[A-Za-z](\/|\w)*$/',CONTROLLER_NAME)){ $module = false; }elseif(C('ACTION_BIND_CLASS')){ $layer = C('DEFAULT_C_LAYER'); if(is_dir(MODULE_PATH.$layer.'/'.CONTROLLER_NAME)){ $namespace = MODULE_NAME.'\\'.$layer.'\\'.CONTROLLER_NAME.'\\'; }else{ $namespace = MODULE_NAME.'\\'.$layer.'\\_empty\\'; } $actionName = strtolower(ACTION_NAME); if(class_exists($namespace.$actionName)){ $class = $namespace.$actionName; }elseif(class_exists($namespace.'_empty')){ $class = $namespace.'_empty'; }else{ E(L('_ERROR_ACTION_').':'.ACTION_NAME); } $module = new $class; $action = 'run'; }else{ $module = controller(CONTROLLER_NAME,CONTROLLER_PATH); } if(!$module) { $module = A('Empty'); if(!$module){ E(L('_CONTROLLER_NOT_EXIST_').':'.CONTROLLER_NAME); } } if(!isset($action)){ $action = ACTION_NAME.C('ACTION_SUFFIX'); } try{ self::invokeAction($module,$action); } catch (\ReflectionException $e) { $method = new \ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } public static function invokeAction($module,$action){ if(!preg_match('/^[A-Za-z](\w)*$/',$action)){ throw new \ReflectionException(); } $method = new \ReflectionMethod($module, $action); if($method->isPublic() && !$method->isStatic()) { $class = new \ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if($method->getNumberOfParameters()>0 && C('URL_PARAMS_BIND')){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php://input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); $paramsBindType = C('URL_PARAMS_BIND_TYPE'); foreach ($params as $param){ $name = $param->getName(); if( 1 == $paramsBindType && !empty($vars) ){ $args[] = array_shift($vars); }elseif( 0 == $paramsBindType && isset($vars[$name])){ $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ E(L('_PARAM_ERROR_').':'.$name); } } if(C('URL_PARAMS_SAFE')){ $filters = C('URL_PARAMS_FILTER')?:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $args = array_map_recursive($filter,$args); } } } array_walk_recursive($args,'think_filter'); $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new \ReflectionException(); } } static public function run() { Hook::listen('app_init'); App::init(); Hook::listen('app_begin'); if(!IS_CLI){ session(C('SESSION_OPTIONS')); } G('initTime'); App::exec(); Hook::listen('app_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7/v/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+/OEQ4+obQn5D+4Ubb22+YOGsWi/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9/W4H3iNSQqIe09O196dLKX7d1O39OViP/wthtkND62if/wj/DbMpph8BY/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc/AOuXiwH07VCS3w5+UQMAuF/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr/XKm0ZofKSI2Q/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc/i3jJSAwhgfFlp20laMLOku/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi/MubUA/mCT4Fhf038PC8XplhWnCmnK/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9/y5i/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl/tFILYwGPjXWO3zOfSq/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v/8jG/fZX/IW5MKPKtjSYlt0ellxh+/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5/1H3gaNmMpn8Fz0GpYFp6Zw615H/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C/P/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh/eMDzHEzGYu0Lg8gJ7oS/tFCwoic44fyUtix0n/46vP4bf+//BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } }}namespace Think{ class Dispatcher { static public function dispatch() { $varPath = C('VAR_PATHINFO'); $varAddon = C('VAR_ADDON'); $varModule = C('VAR_MODULE'); $varController = C('VAR_CONTROLLER'); $varAction = C('VAR_ACTION'); $urlCase = C('URL_CASE_INSENSITIVE'); if(isset($_GET[$varPath])) { $_SERVER['PATH_INFO'] = $_GET[$varPath]; unset($_GET[$varPath]); }elseif(IS_CLI){ $_SERVER['PATH_INFO'] = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : ''; } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { define('APP_DOMAIN',$_SERVER['HTTP_HOST']); $rule = $rules[APP_DOMAIN]; }else{ if(strpos(C('APP_DOMAIN_SUFFIX'),'.')){ $domain = array_slice(explode('.', $_SERVER['HTTP_HOST']), 0, -3); }else{ $domain = array_slice(explode('.', $_SERVER['HTTP_HOST']), 0, -2); } if(!empty($domain)) { $subDomain = implode('.', $domain); define('SUB_DOMAIN',$subDomain); $domain2 = array_pop($domain); if($domain) { $domain3 = array_pop($domain); } if(isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*.' . $domain2]) && !empty($domain3)){ $rule = $rules['*.' . $domain2]; $panDomain = $domain3; }elseif(isset($rules['*']) && !empty($domain2) && 'www' != $domain2 ){ $rule = $rules['*']; $panDomain = $domain2; } } } if(!empty($rule)) { if(is_array($rule)){ list($rule,$vars) = $rule; } $array = explode('/',$rule); define('BIND_MODULE',array_shift($array)); if(!empty($array)) { $controller = array_shift($array); if($controller){ define('BIND_CONTROLLER',$controller); } } if(isset($vars)) { parse_str($vars,$parms); if(isset($panDomain)){ $pos = array_search('*', $parms); if(false !== $pos) { $parms[$pos] = $panDomain; } } $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); define('MODULE_PATHINFO_DEPR', $depr); if(empty($_SERVER['PATH_INFO'])) { $_SERVER['PATH_INFO'] = ''; define('__INFO__',''); define('__EXT__',''); }else{ define('__INFO__',trim($_SERVER['PATH_INFO'],'/')); define('__EXT__', strtolower(pathinfo($_SERVER['PATH_INFO'],PATHINFO_EXTENSION))); $_SERVER['PATH_INFO'] = __INFO__; if(!defined('BIND_MODULE') && (!C('URL_ROUTER_ON') || !Route::check())){ if (__INFO__ && C('MULTI_MODULE')){ $paths = explode($depr,__INFO__,2); $allowList = C('MODULE_ALLOW_LIST'); $module = preg_replace('/\.' . __EXT__ . '$/i', '',$paths[0]); if( empty($allowList) || (is_array($allowList) && in_array_case($module, $allowList))){ $_GET[$varModule] = $module; $_SERVER['PATH_INFO'] = isset($paths[1])?$paths[1]:''; } } } } if ( isset( $_SERVER[C('URL_REQUEST_URI')] ) ) { define('__SELF__',strip_tags($_SERVER[C('URL_REQUEST_URI')])); } else { define('__SELF__',strip_tags($_SERVER['PHP_SELF'])); } define('MODULE_NAME', defined('BIND_MODULE')? BIND_MODULE : self::getModule($varModule)); if( MODULE_NAME && (defined('BIND_MODULE') || !in_array_case(MODULE_NAME,C('MODULE_DENY_LIST')) ) && is_dir(APP_PATH.MODULE_NAME)){ define('MODULE_PATH', APP_PATH.MODULE_NAME.'/'); C('CACHE_PATH',CACHE_PATH.MODULE_NAME.'/'); C('LOG_PATH', realpath(LOG_PATH).'/'.MODULE_NAME.'/'); Hook::listen('module_check'); if(is_file(MODULE_PATH.'Conf/config'.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/config'.CONF_EXT)); if('common' != APP_MODE && is_file(MODULE_PATH.'Conf/config_'.APP_MODE.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/config_'.APP_MODE.CONF_EXT)); if(APP_STATUS && is_file(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)); if(is_file(MODULE_PATH.'Conf/alias.php')) Think::addMap(include MODULE_PATH.'Conf/alias.php'); if(is_file(MODULE_PATH.'Conf/tags.php')) Hook::import(include MODULE_PATH.'Conf/tags.php'); if(is_file(MODULE_PATH.'Common/function.php')) include MODULE_PATH.'Common/function.php'; $urlCase = C('URL_CASE_INSENSITIVE'); load_ext_file(MODULE_PATH); }else{ E(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } if(!defined('__APP__')){ $urlMode = C('URL_MODEL'); if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.$varPath.'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '/' || $url == '\\') $url = ''; define('PHP_FILE',$url); }else { if ( defined('_PHP_FILE_') ) { define('PHP_FILE',_PHP_FILE_); } else { define('PHP_FILE', $_SERVER['PHP_SELF']); } } define('__APP__',strip_tags(PHP_FILE)); } $moduleName = defined('MODULE_ALIAS')? MODULE_ALIAS : MODULE_NAME; define('__MODULE__',(defined('BIND_MODULE') || !C('MULTI_MODULE'))? __APP__ : __APP__.'/'.($urlCase ? strtolower($moduleName) : $moduleName)); if('' != $_SERVER['PATH_INFO'] && (!C('URL_ROUTER_ON') || !Route::check()) ){ Hook::listen('path_info'); if(C('URL_DENY_SUFFIX') && preg_match('/\.('.trim(C('URL_DENY_SUFFIX'),'.').')$/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } $_SERVER['PATH_INFO'] = preg_replace(C('URL_HTML_SUFFIX')? '/\.('.trim(C('URL_HTML_SUFFIX'),'.').')$/i' : '/\.'.__EXT__.'$/i', '', $_SERVER['PATH_INFO']); $depr = C('URL_PATHINFO_DEPR'); $paths = explode($depr,trim($_SERVER['PATH_INFO'],$depr)); if(!defined('BIND_CONTROLLER')) { if(C('CONTROLLER_LEVEL')>1){ $_GET[$varController] = implode('/',array_slice($paths,0,C('CONTROLLER_LEVEL'))); $paths = array_slice($paths, C('CONTROLLER_LEVEL')); }else{ $_GET[$varController] = array_shift($paths); } } if(!defined('BIND_ACTION')){ $_GET[$varAction] = array_shift($paths); } $var = array(); if(C('URL_PARAMS_BIND') && 1 == C('URL_PARAMS_BIND_TYPE')){ $var = $paths; }else{ preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){$var[$match[1]]=strip_tags($match[2]);}, implode('/',$paths)); } $_GET = array_merge($var,$_GET); } define('CONTROLLER_PATH', self::getSpace($varAddon,$urlCase)); define('CONTROLLER_NAME', defined('BIND_CONTROLLER')? BIND_CONTROLLER : self::getController($varController,$urlCase)); define('ACTION_NAME', defined('BIND_ACTION')? BIND_ACTION : self::getAction($varAction,$urlCase)); $controllerName = defined('CONTROLLER_ALIAS')? CONTROLLER_ALIAS : CONTROLLER_NAME; define('__CONTROLLER__',__MODULE__.$depr.(defined('BIND_CONTROLLER')? '': ( $urlCase ? parse_name($controllerName) : $controllerName )) ); define('__ACTION__',__CONTROLLER__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET,$_COOKIE); } static private function getSpace($var,$urlCase) { $space = !empty($_GET[$var])?strip_tags($_GET[$var]):''; unset($_GET[$var]); return $space; } static private function getController($var,$urlCase) { $controller = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_CONTROLLER')); unset($_GET[$var]); if($maps = C('URL_CONTROLLER_MAP')) { if(isset($maps[strtolower($controller)])) { define('CONTROLLER_ALIAS',strtolower($controller)); return ucfirst($maps[CONTROLLER_ALIAS]); }elseif(array_search(strtolower($controller),$maps)){ return ''; } } if($urlCase) { $controller = parse_name($controller,1); } return strip_tags(ucfirst($controller)); } static private function getAction($var,$urlCase) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(CONTROLLER_NAME)])) { $maps = $maps[strtolower(CONTROLLER_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); if(is_array($maps[ACTION_ALIAS])){ parse_str($maps[ACTION_ALIAS][1],$vars); $_GET = array_merge($_GET,$vars); return $maps[ACTION_ALIAS][0]; }else{ return $maps[ACTION_ALIAS]; } }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags( $urlCase? strtolower($action) : $action ); } static private function getModule($var) { $module = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return ucfirst($maps[MODULE_ALIAS]); }elseif(array_search(strtolower($module),$maps)){ return ''; } } return strip_tags(ucfirst($module)); } }}namespace Think{ class Route { public static function check(){ $depr = C('URL_PATHINFO_DEPR'); $regx = preg_replace('/\.'.__EXT__.'$/i','',trim($_SERVER['PATH_INFO'],$depr)); if('/' != $depr){ $regx = str_replace($depr,'/',$regx); } $maps = C('URL_MAP_RULES'); if(isset($maps[$regx])) { $var = self::parseUrl($maps[$regx]); $_GET = array_merge($var, $_GET); return true; } $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { foreach ($routes as $rule=>$route){ if(is_numeric($rule)){ $rule = array_shift($route); } if(is_array($route) && isset($route[2])){ $options = $route[2]; if(isset($options['ext']) && __EXT__ != $options['ext']){ continue; } if(isset($options['method']) && REQUEST_METHOD != strtoupper($options['method'])){ continue; } if(!empty($options['callback']) && is_callable($options['callback'])) { if(false === call_user_func($options['callback'])) { continue; } } } if(0===strpos($rule,'/') && preg_match($rule,$regx,$matches)) { if($route instanceof \Closure) { $result = self::invokeRegx($route, $matches); return is_bool($result) ? $result : exit; }else{ return self::parseRegex($matches,$route,$regx); } }else{ $len1 = substr_count($regx,'/'); $len2 = substr_count($rule,'/'); if($len1>=$len2 || strpos($rule,'[')) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = self::checkUrlMatch($regx,$rule); if(false !== $match) { if($route instanceof \Closure) { $result = self::invokeRule($route, $match); return is_bool($result) ? $result : exit; }else{ return self::parseRule($rule,$route,$regx); } } } } } } return false; } private static function checkUrlMatch($regx,$rule) { $m1 = explode('/',$regx); $m2 = explode('/',$rule); $var = array(); foreach ($m2 as $key=>$val){ if(0 === strpos($val,'[:')){ $val = substr($val,1,-1); } if(':' == substr($val,0,1)) { if($pos = strpos($val,'|')){ $val = substr($val,1,$pos-1); } if(strpos($val,'\\')) { $type = substr($val,-1); if('d'==$type) { if(isset($m1[$key]) && !is_numeric($m1[$key])) return false; } $name = substr($val, 1, -2); }elseif($pos = strpos($val,'^')){ $array = explode('-',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { return false; } $name = substr($val, 1, $pos - 1); }else{ $name = substr($val, 1); } $var[$name] = isset($m1[$key])?$m1[$key]:''; }elseif(0 !== strcasecmp($val,$m1[$key])){ return false; } } return $var; } private static function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'/')){ $path = explode('/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_CONTROLLER')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } } return $var; } private static function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('/',$regx); $matches = array(); $rule = explode('/',$rule); foreach ($rule as $item){ $fun = ''; if(0 === strpos($item,'[:')){ $item = substr($item,1,-1); } if(0===strpos($item,':')) { if($pos = strpos($item,'|')){ $fun = substr($item,$pos+1); $item = substr($item,0,$pos); } if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = !empty($fun)? $fun(array_shift($paths)) : array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace_callback('/:(\d+)/', function($match) use($values){ return $values[$match[1] - 1]; }, $url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = self::parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if(!empty($paths)) { preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){ $var[strtolower($match[1])]=strip_tags($match[2]);}, implode('/',$paths)); } if(is_array($route) && isset($route[1])) { if(is_array($route[1])){ $params = $route[1]; }else{ parse_str($route[1],$params); } $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private static function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace_callback('/:(\d+)/', function($match) use($matches){return $matches[$match[1]];}, $url); if(0=== strpos($url,'/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = self::parseUrl($url); foreach($var as $key=>$val){ if(strpos($val,'|')){ list($val,$fun) = explode('|',$val); $var[$key] = $fun($val); } } $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){ $var[strtolower($match[1])] = strip_tags($match[2]); }, $regx); } if(is_array($route) && isset($route[1])) { if(is_array($route[1])){ $params = $route[1]; }else{ parse_str($route[1],$params); } $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } static private function invokeRegx($closure, $var = array()) { $reflect = new \ReflectionFunction($closure); $params = $reflect->getParameters(); $args = array(); array_shift($var); foreach ($params as $param){ if(!empty($var)) { $args[] = array_shift($var); }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); } } return $reflect->invokeArgs($args); } static private function invokeRule($closure, $var = array()) { $reflect = new \ReflectionFunction($closure); $params = $reflect->getParameters(); $args = array(); foreach ($params as $param){ $name = $param->getName(); if(isset($var[$name])) { $args[] = $var[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); } } return $reflect->invokeArgs($args); } }}namespace Think{ abstract class Controller { protected $view = null; protected $config = array(); public function __construct() { Hook::listen('action_begin',$this->config); $this->view = Think::instance('Think\View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); Storage::put($htmlfile,$content,'html'); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }else{ E(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ E(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); return; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='',$json_option=0) { if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application/json; charset=utf-8'); exit(json_encode($data,$json_option)); case 'XML' : header('Content-Type:text/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data,$json_option).');'); case 'EVAL' : header('Content-Type:text/html; charset=utf-8'); exit($data); default : Hook::listen('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { Hook::listen('action_end'); } } class_alias('Think\Controller','Think\Action');}namespace Think{ class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); Hook::listen('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); Hook::listen('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile); }else{ defined('THEME_PATH') or define('THEME_PATH', $this->getThemePath()); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { $_content = $content; extract($this->tVar, EXTR_OVERWRITE); empty($_content)?include $templateFile:eval('?>'.$_content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); Hook::listen('view_parse',$params); } $content = ob_get_clean(); Hook::listen('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { return $template; } $depr = C('TMPL_FILE_DEPR'); $template = str_replace(':', $depr, $template); $module = MODULE_NAME; if(strpos($template,'@')){ list($module,$template) = explode('@',$template); } defined('THEME_PATH') or define('THEME_PATH', $this->getThemePath($module)); if('' == $template) { $template = CONTROLLER_NAME . $depr . ACTION_NAME; }elseif(false === strpos($template, $depr)){ $template = CONTROLLER_NAME . $depr . $template; } $file = THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); if(C('TMPL_LOAD_DEFAULTTHEME') && THEME_NAME != C('DEFAULT_THEME') && !is_file($file)){ $file = dirname(THEME_PATH).'/'.C('DEFAULT_THEME').'/'.$template.C('TMPL_TEMPLATE_SUFFIX'); } return $file; } protected function getThemePath($module=MODULE_NAME){ $theme = $this->getTemplateTheme(); $tmplPath = C('VIEW_PATH'); if(!$tmplPath){ $tmplPath = defined('TMPL_PATH')? TMPL_PATH.$module.'/' : APP_PATH.$module.'/'.C('DEFAULT_V_LAYER').'/'; } return $tmplPath.$theme; } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } defined('THEME_NAME') || define('THEME_NAME', $theme); return $theme?$theme . '/':''; } }}namespace Behavior{ class BuildLiteBehavior { public function run(&$params) { if(!defined('BUILD_LITE_FILE')) return ; $litefile = C('RUNTIME_LITE_FILE',null,RUNTIME_PATH.'lite.php'); if(is_file($litefile)) return; $defs = get_defined_constants(TRUE); $content = 'namespace {$GLOBALS[\'_beginTime\'] = microtime(TRUE);'; if(MEMORY_LIMIT_ON) { $content .= '$GLOBALS[\'_startUseMems\'] = memory_get_usage();'; } unset($defs['user']['BUILD_LITE_FILE']); $content .= $this->buildArrayDefine($defs['user']).'}'; $filelist = is_file(CONF_PATH.'lite.php')? include CONF_PATH.'lite.php': array( THINK_PATH.'Common/functions.php', COMMON_PATH.'Common/function.php', CORE_PATH . 'Think'.EXT, CORE_PATH . 'Hook'.EXT, CORE_PATH . 'App'.EXT, CORE_PATH . 'Dispatcher'.EXT, CORE_PATH . 'Log'.EXT, CORE_PATH . 'Log/Driver/File'.EXT, CORE_PATH . 'Route'.EXT, CORE_PATH . 'Controller'.EXT, CORE_PATH . 'View'.EXT, CORE_PATH . 'Storage'.EXT, CORE_PATH . 'Storage/Driver/File'.EXT, CORE_PATH . 'Exception'.EXT, BEHAVIOR_PATH . 'ParseTemplateBehavior'.EXT, BEHAVIOR_PATH . 'ContentReplaceBehavior'.EXT, ); foreach ($filelist as $file){ if(is_file($file)) { $content .= compile($file); } } $content = preg_replace('/\$runtimefile = RUNTIME_PATH(.+?)(if\(APP_STATUS)/','\2',$content,1); $content .= "\nnamespace { Think\Think::addMap(".var_export(\Think\Think::getMap(),true).");"; $content .= "\nL(".var_export(L(),true).");\nC(".var_export(C(),true).');Think\Hook::import('.var_export(\Think\Hook::get(),true).');Think\Think::start();}'; file_put_contents($litefile,strip_whitespace('<?php '.$content)); } private function buildArrayDefine($array) { $content = "\n"; foreach ($array as $key => $val) { $key = strtoupper($key); $content .= 'defined(\'' . $key . '\') or '; if (is_int($val) || is_float($val)) { $content .= "define('" . $key . "'," . $val . ');'; } elseif (is_bool($val)) { $val = ($val) ? 'true' : 'false'; $content .= "define('" . $key . "'," . $val . ');'; } elseif (is_string($val)) { $content .= "define('" . $key . "','" . addslashes($val) . "');"; } $content .= "\n"; } return $content; } }}namespace Behavior{ use Think\Storage; use Think\Think; class ParseTemplateBehavior { public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { Storage::load(C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'),$_data['var']); }else{ $tpl = Think::instance('Think\\Template'); $tpl->fetch($_content,$_data['var'],$_data['prefix']); } }else{ if(strpos($engine,'\\')){ $class = $engine; }else{ $class = 'Think\\Template\\Driver\\'.ucwords($engine); } if(class_exists($class)) { $tpl = new $class; $tpl->fetch($_content,$_data['var']); }else { E(L('_NOT_SUPPORT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!Storage::has($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > Storage::get($tmplCacheFile,'mtime')) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > Storage::get($tmplCacheFile,'mtime')+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > Storage::get($tmplCacheFile,'mtime')) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(Storage::has(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } }}namespace Behavior{ class ContentReplaceBehavior { public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__MODULE__' => __MODULE__, '__ACTION__' => __ACTION__, '__SELF__' => htmlentities(__SELF__), '__CONTROLLER__'=> __CONTROLLER__, '__URL__' => __CONTROLLER__, '__PUBLIC__' => __ROOT__.'/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } }} namespace { Think\Think::addMap(array ( 'Think\\Log' => '/project/knowledge/src/lib/Library/Think/Log.class.php', 'Think\\Log\\Driver\\File' => '/project/knowledge/src/lib/Library/Think/Log/Driver/File.class.php', 'Think\\Exception' => '/project/knowledge/src/lib/Library/Think/Exception.class.php', 'Think\\Model' => '/project/knowledge/src/lib/Library/Think/Model.class.php', 'Think\\Db' => '/project/knowledge/src/lib/Library/Think/Db.class.php', 'Think\\Template' => '/project/knowledge/src/lib/Library/Think/Template.class.php', 'Think\\Cache' => '/project/knowledge/src/lib/Library/Think/Cache.class.php', 'Think\\Cache\\Driver\\File' => '/project/knowledge/src/lib/Library/Think/Cache/Driver/File.class.php', 'Think\\Storage' => '/project/knowledge/src/lib/Library/Think/Storage.class.php', )); L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_CONTROLLER_NOT_EXIST_' => '无法加载控制器', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPORT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', '_ERROR_QUERY_EXPRESS_' => '错误的查询条件', )); C(array ( 'APP_USE_NAMESPACE' => true, 'APP_SUB_DOMAIN_DEPLOY' => false, 'APP_SUB_DOMAIN_RULES' => array ( ), 'APP_DOMAIN_SUFFIX' => '', 'ACTION_SUFFIX' => '', 'MULTI_MODULE' => true, 'MODULE_DENY_LIST' => array ( 0 => '_documents', 1 => 'configs', 2 => 'Common', ), 'CONTROLLER_LEVEL' => 1, 'APP_AUTOLOAD_LAYER' => 'Controller,Model', 'APP_AUTOLOAD_PATH' => '', 'COOKIE_EXPIRE' => 0, 'COOKIE_DOMAIN' => '', 'COOKIE_PATH' => '/', 'COOKIE_PREFIX' => '', 'COOKIE_SECURE' => false, 'COOKIE_HTTPONLY' => '', 'DEFAULT_M_LAYER' => 'Model', 'DEFAULT_C_LAYER' => 'Controller', 'DEFAULT_V_LAYER' => 'View', 'DEFAULT_LANG' => 'zh-cn', 'DEFAULT_THEME' => '', 'DEFAULT_MODULE' => 'Baike', 'DEFAULT_CONTROLLER' => 'index', 'DEFAULT_ACTION' => 'index', 'DEFAULT_CHARSET' => 'utf-8', 'DEFAULT_TIMEZONE' => 'PRC', 'DEFAULT_AJAX_RETURN' => 'JSON', 'DEFAULT_JSONP_HANDLER' => 'jsonpReturn', 'DEFAULT_FILTER' => 'trim,strip_tags,stripslashes,htmlspecialchars', 'DB_TYPE' => 'mysql', 'DB_HOST' => '10.204.12.29', 'DB_NAME' => 'knowledge', 'DB_USER' => 'lejuuser', 'DB_PWD' => 'r%fCwhs@XCW0nlI!', 'DB_PORT' => '3308', 'DB_PREFIX' => '', 'DB_PARAMS' => array ( ), 'DB_DEBUG' => false, 'DB_FIELDS_CACHE' => true, 'DB_CHARSET' => 'utf8', 'DB_DEPLOY_TYPE' => 0, 'DB_RW_SEPARATE' => false, 'DB_MASTER_NUM' => 1, 'DB_SLAVE_NO' => '', 'DATA_CACHE_TIME' => 0, 'DATA_CACHE_COMPRESS' => false, 'DATA_CACHE_CHECK' => false, 'DATA_CACHE_PREFIX' => '', 'DATA_CACHE_TYPE' => 'File', 'DATA_CACHE_PATH' => '/project/tmp/Temp/', 'DATA_CACHE_KEY' => '', 'DATA_CACHE_SUBDIR' => false, 'DATA_PATH_LEVEL' => 1, 'ERROR_MESSAGE' => '页面错误！请稍后再试～', 'ERROR_PAGE' => '', 'SHOW_ERROR_MSG' => false, 'TRACE_MAX_RECORD' => 100, 'LOG_RECORD' => false, 'LOG_TYPE' => 'File', 'LOG_LEVEL' => 'EMERG,ALERT,CRIT,ERR', 'LOG_FILE_SIZE' => 2097152, 'LOG_EXCEPTION_RECORD' => false, 'SESSION_AUTO_START' => true, 'SESSION_OPTIONS' => array ( ), 'SESSION_TYPE' => '', 'SESSION_PREFIX' => '', 'TMPL_CONTENT_TYPE' => 'text/html', 'TMPL_ACTION_ERROR' => '/project/knowledge/src/lib/Tpl/dispatch_jump.tpl', 'TMPL_ACTION_SUCCESS' => '/project/knowledge/src/lib/Tpl/dispatch_jump.tpl', 'TMPL_EXCEPTION_FILE' => '/project/knowledge/src/lib/Tpl/think_exception.tpl', 'TMPL_DETECT_THEME' => false, 'TMPL_TEMPLATE_SUFFIX' => '.html', 'TMPL_FILE_DEPR' => '/', 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => true, 'TMPL_CACHE_ON' => true, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '<', 'TAGLIB_END' => '>', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', 'URL_CASE_INSENSITIVE' => true, 'URL_MODEL' => 1, 'URL_PATHINFO_DEPR' => '/', 'URL_PATHINFO_FETCH' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'URL_REQUEST_URI' => 'REQUEST_URI', 'URL_HTML_SUFFIX' => 'html', 'URL_DENY_SUFFIX' => 'ico|png|gif|jpg', 'URL_PARAMS_BIND' => true, 'URL_PARAMS_BIND_TYPE' => 0, 'URL_PARAMS_FILTER' => false, 'URL_PARAMS_FILTER_TYPE' => '', 'URL_ROUTER_ON' => true, 'URL_ROUTE_RULES' => array ( ), 'URL_MAP_RULES' => array ( ), 'VAR_MODULE' => 'm', 'VAR_ADDON' => 'addon', 'VAR_CONTROLLER' => 'c', 'VAR_ACTION' => 'a', 'VAR_AJAX_SUBMIT' => 'ajax', 'VAR_JSONP_HANDLER' => 'callback', 'VAR_PATHINFO' => 's', 'VAR_TEMPLATE' => 't', 'VAR_AUTO_STRING' => false, 'HTTP_CACHE_CONTROL' => 'private', 'CHECK_APP_DIR' => true, 'FILE_UPLOAD_TYPE' => 'Local', 'DATA_CRYPT_TYPE' => 'Think', 'MODULE_ALLOW_LIST' => array ( 0 => 'Baike', 1 => 'Tag', ), 'REDIS' => array ( 'type' => 'redis', 'persistent' => 1, 'host' => '10.204.12.29', 'port' => '6381', 'auth' => '2EDI5R3d1S', 'prefix' => '', 'dbnum' => '2', ), 'ENGINE' => array ( 'SEARCH_API' => 'http://127.0.0.1:8100/ch/search', 'MULTI_API' => 'http://127.0.0.1:8100/ch/multi', 'GET_TOKEN' => 'http://127.0.0.1:8100/ch/login', 'AUTH_USER' => 'baike', 'AUTH_PASS' => '4vLE4wwy6Otcoup9Bc', 'PARSETAGS_API' => 'http://127.0.0.1:8100/ch/analyze', 'PARSE_DICTS' => array ( 0 => 'dict_tags', 1 => 'dict_wiki', ), 'PARSETAGS_ID' => 'dict_tags', 'PARSEWORDS_ID' => 'dict_wiki', 'SUGGEST_API' => 'http://127.0.0.1:8100/ch/suggest', 'DICT_GETALL' => 'http://127.0.0.1:8100/ch/admin/dict/getwordset', 'DICT_SETALL' => 'http://127.0.0.1:8100/ch/admin/dict/setwordset', 'DICT_APPEND' => 'http://127.0.0.1:8100/ch/admin/dict/appendword', 'DICT_REMOVE' => 'http://127.0.0.1:8100/ch/admin/dict/removeword', 'DICT_EXISTS' => 'http://127.0.0.1:8100/ch/admin/dict/existsword', 'DICT_COUNT' => 'http://127.0.0.1:8100/ch/admin/dict/wordcount', 'CUSTOM_CREATE' => 'http://127.0.0.1:8100/ch/admin/index/create', 'CUSTOM_UPDATE' => 'http://127.0.0.1:8100/ch/admin/index/update', 'CUSTOM_REMOVE' => 'http://127.0.0.1:8100/ch/admin/index/remove', 'BATCHES_UPDATE' => 'http://127.0.0.1:8100/ch/admin/index/updatebyquery', 'BATCHES_REMOVE' => 'http://127.0.0.1:8100/ch/admin/index/removebyquery', 'RECOMMEND_RANDOM' => 'http://127.0.0.1:8100/ch/randomsearch', ), 'SENSITIVE' => array ( 'DETECT' => 'http://127.0.0.1:8110/ch/sensitive/worddetect', ), 'DATA_TRANSFER_API_URL' => 'http://127.0.0.1:8080/', 'BAIDU_PUSH' => array ( 'baike' => 'http://data.zz.baidu.com/urls?site=baike.leju.com&token=qNDqC3t6CAZTectq', 'ask' => 'http://data.zz.baidu.com/urls?site=ask.leju.com&token=qNDqC3t6CAZTectq', ), 'PHOTOLIB' => array ( 'PKEY' => 'd874a2b11f1a3e436df9369fe8412e0f', 'MKEY' => '462a76239321e4f12606d7cea81918c8', ), 'EMS' => array ( 'EMAIL_NOTICE' => array ( 'name' => '知识百科邮件通知', 'type' => 'email', 'appid' => '2016122073', 'key' => 'd77e3c079697355d7d20cbc262ef03b0', ), 'SMS_NOTICE' => array ( 'name' => '乐居房产百科短信通知', 'type' => 'sms', 'appid' => '2017042732', 'key' => 'cfa7d4e37944b57b3ca2d67f9133aa7f', ), ), 'INFOLIB' => array ( 'NEWS' => array ( 'api' => 'http://info.leju.com/search/default/index', 'key' => 'b7da020e5140547a09e1298734105a01', 'appid' => '2016102866', 'type' => 'new_news', 'M_DOMAIN' => 'http://m.leju.com', ), 'JIAJU' => array ( 'api' => 'http://info.leju.com/search/default/index', 'key' => 'd24145f26bb9fb38a8367e03f181a86b', 'appid' => '2016112821', 'type' => 'jiaju_new_news', ), 'HOUSE' => array ( 'api' => 'http://info.leju.com/search/default/index', 'key' => '8d6c1ff07d1e74d24ae7b4fb27a8ed86', 'appid' => '2016102823', 'type' => 'house', 'DOMAIN' => 'http://house.leju.com', 'M_DOMAIN' => 'http://m.leju.com', ), 'TAG' => array ( 'api' => 'http://info.leju.com/search/default/index', 'key' => '03f3dc086a2c80a483795c29b53daa01', 'appid' => '2017060612', 'type' => 'tags', ), 'TAGS' => array ( 'api' => 'http://info.leju.com/search/default/index', 'key' => 'd943f2450814a06d24d329ba8799d0ed', 'appid' => '2016101744', 'type' => 'news_tags', ), 'WIKI' => array ( 'push' => 'http://info.leju.com/accept/accept/index', 'api' => 'http://info.leju.com/search/default/index', 'key' => '05845c4bce10f7e6d3a47554e08328da', 'appid' => '2016120163', 'type' => 'wiki', ), ), 'LEJUCOMMENTS' => array ( 'key' => 'c60ac31f20c7172ed6e73cb07efa4af9', 'api' => array ( 'getCommentCount' => 'http://c.leju.com/api/comment/getArchiveCommentCount', ), ), 'STAT' => array ( 'key' => 'cdf8101c8230bfdaf62c9fff0224579d', 'GETRANK' => array ( 'api' => 'http://stat.leju.com/api/data/getrank', ), ), 'ADMINLOGIN' => array ( 'DEVELOPMENT' => array ( 'app_key' => '95d7d0a55d897beec95aa36ac9c1a64e', 'api_url' => 'http://10.207.0.186', 'headers' => array ( 0 => 'Host:test.admin.house.sina.com.cn', ), ), 'PRODUCT' => array ( 'app_key' => 'ae09afeec9200bc513892514a6263127', 'api_url' => 'http://admin.house.sina.com.cn', 'headers' => array ( ), ), 'APIs' => array ( 'getUser' => '/welcome/getuser', ), ), 'CITIES' => array ( 'ALL' => array ( 'aa' => array ( 'l' => 'A', 'en' => 'aa', 'cn' => '阿拉善盟', 'py' => 'alashanmeng', ), 'ab' => array ( 'l' => 'A', 'en' => 'ab', 'cn' => '阿坝', 'py' => 'aba', ), 'af' => array ( 'l' => 'A', 'en' => 'af', 'cn' => '安福', 'py' => 'anfu', ), 'ai' => array ( 'l' => 'A', 'en' => 'ai', 'cn' => '安庆', 'py' => 'anqing', ), 'ak' => array ( 'l' => 'A', 'en' => 'ak', 'cn' => '安康', 'py' => 'ankang', ), 'al' => array ( 'l' => 'A', 'en' => 'al', 'cn' => '阿里', 'py' => 'ali', ), 'an' => array ( 'l' => 'A', 'en' => 'an', 'cn' => '安顺', 'py' => 'anshun', ), 'anshan' => array ( 'l' => 'A', 'en' => 'anshan', 'cn' => '鞍山', 'py' => 'anshan', ), 'ay' => array ( 'l' => 'A', 'en' => 'ay', 'cn' => '安阳', 'py' => 'anyang', ), 'aj' => array ( 'l' => 'B', 'en' => 'aj', 'cn' => '宝鸡', 'py' => 'baoji', ), 'baoding' => array ( 'l' => 'B', 'en' => 'baoding', 'cn' => '保定', 'py' => 'baoding', ), 'bb' => array ( 'l' => 'B', 'en' => 'bb', 'cn' => '蚌埠', 'py' => 'bengbu', ), 'bc' => array ( 'l' => 'B', 'en' => 'bc', 'cn' => '百色', 'py' => 'baise', ), 'be' => array ( 'l' => 'B', 'en' => 'be', 'cn' => '毕节', 'py' => 'bijie', ), 'beihai' => array ( 'l' => 'B', 'en' => 'beihai', 'cn' => '北海', 'py' => 'beihai', ), 'bf' => array ( 'l' => 'B', 'en' => 'bf', 'cn' => '白城', 'py' => 'baicheng', ), 'bj' => array ( 'l' => 'B', 'en' => 'bj', 'cn' => '北京', 'py' => 'beijing', ), 'bk' => array ( 'l' => 'B', 'en' => 'bk', 'cn' => '白山', 'py' => 'baishan', ), 'bn' => array ( 'l' => 'B', 'en' => 'bn', 'cn' => '滨州', 'py' => 'binzhou', ), 'bo' => array ( 'l' => 'B', 'en' => 'bo', 'cn' => '亳州', 'py' => 'bozhou', ), 'boao' => array ( 'l' => 'B', 'en' => 'boao', 'cn' => '博鳌', 'py' => 'boao', ), 'bs' => array ( 'l' => 'B', 'en' => 'bs', 'cn' => '保山', 'py' => 'baoshan', ), 'bt' => array ( 'l' => 'B', 'en' => 'bt', 'cn' => '包头', 'py' => 'baotou', ), 'bx' => array ( 'l' => 'B', 'en' => 'bx', 'cn' => '本溪', 'py' => 'benxi', ), 'bz' => array ( 'l' => 'B', 'en' => 'bz', 'cn' => '巴中', 'py' => 'bazhong', ), 'ia' => array ( 'l' => 'B', 'en' => 'ia', 'cn' => '白银', 'py' => 'baiyin', ), 'ne' => array ( 'l' => 'B', 'en' => 'ne', 'cn' => '巴彦淖尔', 'py' => 'bayannaoer', ), 'ce' => array ( 'l' => 'C', 'en' => 'ce', 'cn' => '承德', 'py' => 'chengde', ), 'cf' => array ( 'l' => 'C', 'en' => 'cf', 'cn' => '赤峰', 'py' => 'chifeng', ), 'cg' => array ( 'l' => 'C', 'en' => 'cg', 'cn' => '昌都', 'py' => 'changdu', ), 'changde' => array ( 'l' => 'C', 'en' => 'changde', 'cn' => '常德', 'py' => 'changde', ), 'changshu' => array ( 'l' => 'C', 'en' => 'changshu', 'cn' => '常熟', 'py' => 'changshu', ), 'chenzhou' => array ( 'l' => 'C', 'en' => 'chenzhou', 'cn' => '郴州', 'py' => 'chenzhou', ), 'ci' => array ( 'l' => 'C', 'en' => 'ci', 'cn' => '长治', 'py' => 'changzhi', ), 'cj' => array ( 'l' => 'C', 'en' => 'cj', 'cn' => '滁州', 'py' => 'chuzhou', ), 'cl' => array ( 'l' => 'C', 'en' => 'cl', 'cn' => '巢湖', 'py' => 'chaohu', ), 'cm' => array ( 'l' => 'C', 'en' => 'cm', 'cn' => '长垣', 'py' => 'changyuan', ), 'cn' => array ( 'l' => 'C', 'en' => 'cn', 'cn' => '昌图', 'py' => 'changtu', ), 'co' => array ( 'l' => 'C', 'en' => 'co', 'cn' => '沧州', 'py' => 'cangzhou', ), 'cq' => array ( 'l' => 'C', 'en' => 'cq', 'cn' => '重庆', 'py' => 'chongqing', ), 'cs' => array ( 'l' => 'C', 'en' => 'cs', 'cn' => '长沙', 'py' => 'changsha', ), 'ct' => array ( 'l' => 'C', 'en' => 'ct', 'cn' => '崇左', 'py' => 'chongzuo', ), 'cu' => array ( 'l' => 'C', 'en' => 'cu', 'cn' => '潮州', 'py' => 'chaozhou', ), 'cx' => array ( 'l' => 'C', 'en' => 'cx', 'cn' => '楚雄', 'py' => 'chuxiong', ), 'cy' => array ( 'l' => 'C', 'en' => 'cy', 'cn' => '朝阳', 'py' => 'chaoyang', ), 'cz' => array ( 'l' => 'C', 'en' => 'cz', 'cn' => '常州', 'py' => 'changzhou', ), 'dj' => array ( 'l' => 'C', 'en' => 'dj', 'cn' => '昌吉', 'py' => 'changji', ), 'iu' => array ( 'l' => 'C', 'en' => 'iu', 'cn' => '池州', 'py' => 'chizhou', ), 'jl' => array ( 'l' => 'C', 'en' => 'jl', 'cn' => '长春', 'py' => 'changchun', ), 'sc' => array ( 'l' => 'C', 'en' => 'sc', 'cn' => '成都', 'py' => 'chengdou', ), 'da' => array ( 'l' => 'D', 'en' => 'da', 'cn' => '大理', 'py' => 'dali', ), 'daqing' => array ( 'l' => 'D', 'en' => 'daqing', 'cn' => '大庆', 'py' => 'daqing', ), 'dazhou' => array ( 'l' => 'D', 'en' => 'dazhou', 'cn' => '达州', 'py' => 'dazhou', ), 'dc' => array ( 'l' => 'D', 'en' => 'dc', 'cn' => '定州', 'py' => 'dingzhou', ), 'dd' => array ( 'l' => 'D', 'en' => 'dd', 'cn' => '丹东', 'py' => 'dandong', ), 'deyang' => array ( 'l' => 'D', 'en' => 'deyang', 'cn' => '德阳', 'py' => 'deyang', ), 'dg' => array ( 'l' => 'D', 'en' => 'dg', 'cn' => '东莞', 'py' => 'dongguan', ), 'dh' => array ( 'l' => 'D', 'en' => 'dh', 'cn' => '德宏', 'py' => 'dehong', ), 'di' => array ( 'l' => 'D', 'en' => 'di', 'cn' => '迪庆', 'py' => 'diqing', ), 'dl' => array ( 'l' => 'D', 'en' => 'dl', 'cn' => '大连', 'py' => 'dalian', ), 'do' => array ( 'l' => 'D', 'en' => 'do', 'cn' => '邓州', 'py' => 'dengzhou', ), 'dt' => array ( 'l' => 'D', 'en' => 'dt', 'cn' => '大同', 'py' => 'datong', ), 'du' => array ( 'l' => 'D', 'en' => 'du', 'cn' => '德州', 'py' => 'dezhou', ), 'dx' => array ( 'l' => 'D', 'en' => 'dx', 'cn' => '定西', 'py' => 'dingxi', ), 'dy' => array ( 'l' => 'D', 'en' => 'dy', 'cn' => '东营', 'py' => 'dongying', ), 'ig' => array ( 'l' => 'D', 'en' => 'ig', 'cn' => '大兴安岭', 'py' => 'daxinganling', ), 'eeds' => array ( 'l' => 'E', 'en' => 'eeds', 'cn' => '鄂尔多斯', 'py' => 'eerduosi', ), 'es' => array ( 'l' => 'E', 'en' => 'es', 'cn' => '恩施', 'py' => 'enshi', ), 'ez' => array ( 'l' => 'E', 'en' => 'ez', 'cn' => '鄂州', 'py' => 'ezhou', ), 'fa' => array ( 'l' => 'F', 'en' => 'fa', 'cn' => '抚顺', 'py' => 'fushun', ), 'fcg' => array ( 'l' => 'F', 'en' => 'fcg', 'cn' => '防城港', 'py' => 'fangchenggang', ), 'fe' => array ( 'l' => 'F', 'en' => 'fe', 'cn' => '丰城', 'py' => 'fengcheng', ), 'fg' => array ( 'l' => 'F', 'en' => 'fg', 'cn' => '府谷', 'py' => 'fugu', ), 'fj' => array ( 'l' => 'F', 'en' => 'fj', 'cn' => '福州', 'py' => 'fuzhou', ), 'fo' => array ( 'l' => 'F', 'en' => 'fo', 'cn' => '抚州', 'py' => 'fuzhou', ), 'fq' => array ( 'l' => 'F', 'en' => 'fq', 'cn' => '福泉', 'py' => 'fuquan', ), 'fs' => array ( 'l' => 'F', 'en' => 'fs', 'cn' => '佛山', 'py' => 'foshan', ), 'fu' => array ( 'l' => 'F', 'en' => 'fu', 'cn' => '抚远', 'py' => 'fuyuan', ), 'fx' => array ( 'l' => 'F', 'en' => 'fx', 'cn' => '阜新', 'py' => 'fuxin', ), 'fy' => array ( 'l' => 'F', 'en' => 'fy', 'cn' => '阜阳', 'py' => 'fuyang', ), 'ga' => array ( 'l' => 'G', 'en' => 'ga', 'cn' => '广安', 'py' => 'guangan', ), 'ganzhou' => array ( 'l' => 'G', 'en' => 'ganzhou', 'cn' => '赣州', 'py' => 'ganzhou', ), 'gb' => array ( 'l' => 'G', 'en' => 'gb', 'cn' => '甘南', 'py' => 'gannan', ), 'gc' => array ( 'l' => 'G', 'en' => 'gc', 'cn' => '固原', 'py' => 'guyuan', ), 'gd' => array ( 'l' => 'G', 'en' => 'gd', 'cn' => '广德', 'py' => 'guangde', ), 'gf' => array ( 'l' => 'G', 'en' => 'gf', 'cn' => '果洛', 'py' => 'guoluo', ), 'gg' => array ( 'l' => 'G', 'en' => 'gg', 'cn' => '贵港', 'py' => 'guigang', ), 'gi' => array ( 'l' => 'G', 'en' => 'gi', 'cn' => '广元', 'py' => 'guangyuan', ), 'go' => array ( 'l' => 'G', 'en' => 'go', 'cn' => '巩义', 'py' => 'gongyi', ), 'gq' => array ( 'l' => 'G', 'en' => 'gq', 'cn' => '共青城', 'py' => 'gongqingcheng', ), 'gs' => array ( 'l' => 'G', 'en' => 'gs', 'cn' => '甘孜', 'py' => 'ganzi', ), 'gu' => array ( 'l' => 'G', 'en' => 'gu', 'cn' => '固始', 'py' => 'gushi', ), 'guilin' => array ( 'l' => 'G', 'en' => 'guilin', 'cn' => '桂林', 'py' => 'guilin', ), 'guizhou' => array ( 'l' => 'G', 'en' => 'guizhou', 'cn' => '贵阳', 'py' => 'guiyang', ), 'gz' => array ( 'l' => 'G', 'en' => 'gz', 'cn' => '广州', 'py' => 'guangzhou', ), 'zl' => array ( 'l' => 'G', 'en' => 'zl', 'cn' => '公主岭', 'py' => 'gongzhuling', ), 'az' => array ( 'l' => 'H', 'en' => 'az', 'cn' => '汉中', 'py' => 'hanzhong', ), 'db' => array ( 'l' => 'H', 'en' => 'db', 'cn' => '海东', 'py' => 'haidong', ), 'ea' => array ( 'l' => 'H', 'en' => 'ea', 'cn' => '海北', 'py' => 'haibei', ), 'eg' => array ( 'l' => 'H', 'en' => 'eg', 'cn' => '鹤岗', 'py' => 'hegang', ), 'eh' => array ( 'l' => 'H', 'en' => 'eh', 'cn' => '菏泽', 'py' => 'heze', ), 'ei' => array ( 'l' => 'H', 'en' => 'ei', 'cn' => '黑河', 'py' => 'heihe', ), 'er' => array ( 'l' => 'H', 'en' => 'er', 'cn' => '呼伦贝尔', 'py' => 'hulunbeier', ), 'h' => array ( 'l' => 'H', 'en' => 'h', 'cn' => '哈尔滨', 'py' => 'haerbin', ), 'han' => array ( 'l' => 'H', 'en' => 'han', 'cn' => '海口', 'py' => 'haikou', ), 'handan' => array ( 'l' => 'H', 'en' => 'handan', 'cn' => '邯郸', 'py' => 'handan', ), 'hangzhou' => array ( 'l' => 'H', 'en' => 'hangzhou', 'cn' => '杭州', 'py' => 'hangzhou', ), 'hb' => array ( 'l' => 'H', 'en' => 'hb', 'cn' => '河源', 'py' => 'heyuan', ), 'hc' => array ( 'l' => 'H', 'en' => 'hc', 'cn' => '淮南', 'py' => 'huainan', ), 'he' => array ( 'l' => 'H', 'en' => 'he', 'cn' => '淮北', 'py' => 'huaibei', ), 'hengyang' => array ( 'l' => 'H', 'en' => 'hengyang', 'cn' => '衡阳', 'py' => 'hengyang', ), 'hf' => array ( 'l' => 'H', 'en' => 'hf', 'cn' => '合肥', 'py' => 'hefei', ), 'hg' => array ( 'l' => 'H', 'en' => 'hg', 'cn' => '黄冈', 'py' => 'huanggang', ), 'hh' => array ( 'l' => 'H', 'en' => 'hh', 'cn' => '怀化', 'py' => 'huaihua', ), 'hhht' => array ( 'l' => 'H', 'en' => 'hhht', 'cn' => '呼和浩特', 'py' => 'huhehaote', ), 'hj' => array ( 'l' => 'H', 'en' => 'hj', 'cn' => '淮安', 'py' => 'huaian', ), 'hl' => array ( 'l' => 'H', 'en' => 'hl', 'cn' => '葫芦岛', 'py' => 'huludao', ), 'hm' => array ( 'l' => 'H', 'en' => 'hm', 'cn' => '海门', 'py' => 'haimen', ), 'ho' => array ( 'l' => 'H', 'en' => 'ho', 'cn' => '湖州', 'py' => 'huzhou', ), 'hq' => array ( 'l' => 'H', 'en' => 'hq', 'cn' => '红河', 'py' => 'honghe', ), 'hr' => array ( 'l' => 'H', 'en' => 'hr', 'cn' => '黄山', 'py' => 'huangshan', ), 'hs' => array ( 'l' => 'H', 'en' => 'hs', 'cn' => '衡水', 'py' => 'hengshui', ), 'ht' => array ( 'l' => 'H', 'en' => 'ht', 'cn' => '贺州', 'py' => 'hezhou', ), 'huangshi' => array ( 'l' => 'H', 'en' => 'huangshi', 'cn' => '黄石', 'py' => 'huangshi', ), 'huizhou' => array ( 'l' => 'H', 'en' => 'huizhou', 'cn' => '惠州', 'py' => 'huizhou', ), 'hw' => array ( 'l' => 'H', 'en' => 'hw', 'cn' => '鹤壁', 'py' => 'hebi', ), 'hx' => array ( 'l' => 'H', 'en' => 'hx', 'cn' => '河池', 'py' => 'hechi', ), 'ih' => array ( 'l' => 'H', 'en' => 'ih', 'cn' => '海南藏族自治州', 'py' => 'hainanzangzuzizhizho', ), 'nn' => array ( 'l' => 'H', 'en' => 'nn', 'cn' => '海宁', 'py' => 'haining', ), 'nx' => array ( 'l' => 'H', 'en' => 'nx', 'cn' => '滑县', 'py' => 'huaxian', ), 'od' => array ( 'l' => 'H', 'en' => 'od', 'cn' => '荷兰', 'py' => 'helan', ), 'rh' => array ( 'l' => 'H', 'en' => 'rh', 'cn' => '怀仁', 'py' => 'huairen', ), 'ua' => array ( 'l' => 'H', 'en' => 'ua', 'cn' => '黄南', 'py' => 'huangnan', ), 'uu' => array ( 'l' => 'H', 'en' => 'uu', 'cn' => '韩城', 'py' => 'hancheng', ), 'xk' => array ( 'l' => 'H', 'en' => 'xk', 'cn' => '海西', 'py' => 'haixi', ), 'ag' => array ( 'l' => 'J', 'en' => 'ag', 'cn' => '金昌', 'py' => 'jinchang', ), 'ja' => array ( 'l' => 'J', 'en' => 'ja', 'cn' => '锦州', 'py' => 'jinzhou', ), 'jc' => array ( 'l' => 'J', 'en' => 'jc', 'cn' => '晋城', 'py' => 'jincheng', ), 'jd' => array ( 'l' => 'J', 'en' => 'jd', 'cn' => '荆门', 'py' => 'jingmen', ), 'je' => array ( 'l' => 'J', 'en' => 'je', 'cn' => '揭阳', 'py' => 'jieyang', ), 'jf' => array ( 'l' => 'J', 'en' => 'jf', 'cn' => '吉安', 'py' => 'jian', ), 'jh' => array ( 'l' => 'J', 'en' => 'jh', 'cn' => '金华', 'py' => 'jinhua', ), 'ji' => array ( 'l' => 'J', 'en' => 'ji', 'cn' => '焦作', 'py' => 'jiaozuo', ), 'jiangmen' => array ( 'l' => 'J', 'en' => 'jiangmen', 'cn' => '江门', 'py' => 'jiangmen', ), 'jilin' => array ( 'l' => 'J', 'en' => 'jilin', 'cn' => '吉林', 'py' => 'jilin', ), 'jingzhou' => array ( 'l' => 'J', 'en' => 'jingzhou', 'cn' => '荆州', 'py' => 'jingzhou', ), 'jinzhong' => array ( 'l' => 'J', 'en' => 'jinzhong', 'cn' => '晋中', 'py' => 'jinzhong', ), 'jiujiang' => array ( 'l' => 'J', 'en' => 'jiujiang', 'cn' => '九江', 'py' => 'jiujiang', ), 'jk' => array ( 'l' => 'J', 'en' => 'jk', 'cn' => '金门', 'py' => 'jinmen', ), 'jn' => array ( 'l' => 'J', 'en' => 'jn', 'cn' => '济宁', 'py' => 'jining', ), 'jp' => array ( 'l' => 'J', 'en' => 'jp', 'cn' => '济源', 'py' => 'jiyuan', ), 'jq' => array ( 'l' => 'J', 'en' => 'jq', 'cn' => '酒泉', 'py' => 'jiuquan', ), 'js' => array ( 'l' => 'J', 'en' => 'js', 'cn' => '吉首', 'py' => 'jishou', ), 'ju' => array ( 'l' => 'J', 'en' => 'ju', 'cn' => '嘉峪关', 'py' => 'jiayuguan', ), 'jv' => array ( 'l' => 'J', 'en' => 'jv', 'cn' => '鸡西', 'py' => 'jixi', ), 'jw' => array ( 'l' => 'J', 'en' => 'jw', 'cn' => '景德镇', 'py' => 'jingdezhen', ), 'jx' => array ( 'l' => 'J', 'en' => 'jx', 'cn' => '嘉兴', 'py' => 'jiaxing', ), 'jy' => array ( 'l' => 'J', 'en' => 'jy', 'cn' => '江阴', 'py' => 'jiangyin', ), 'sd' => array ( 'l' => 'J', 'en' => 'sd', 'cn' => '济南', 'py' => 'jinan', ), 'ss' => array ( 'l' => 'J', 'en' => 'ss', 'cn' => '佳木斯', 'py' => 'jiamusi', ), 'ka' => array ( 'l' => 'K', 'en' => 'ka', 'cn' => '喀什', 'py' => 'kashi', ), 'kf' => array ( 'l' => 'K', 'en' => 'kf', 'cn' => '开封', 'py' => 'kaifeng', ), 'kl' => array ( 'l' => 'K', 'en' => 'kl', 'cn' => '凯里', 'py' => 'kaili', ), 'ks' => array ( 'l' => 'K', 'en' => 'ks', 'cn' => '昆山', 'py' => 'kunshan', ), 'yn' => array ( 'l' => 'K', 'en' => 'yn', 'cn' => '昆明', 'py' => 'kunming', ), 'ac' => array ( 'l' => 'L', 'en' => 'ac', 'cn' => '聊城', 'py' => 'liaocheng', ), 'dr' => array ( 'l' => 'L', 'en' => 'dr', 'cn' => '鹿邑', 'py' => 'luyi', ), 'ip' => array ( 'l' => 'L', 'en' => 'ip', 'cn' => '黎平', 'py' => 'liping', ), 'ix' => array ( 'l' => 'L', 'en' => 'ix', 'cn' => '临夏', 'py' => 'linxia', ), 'ko' => array ( 'l' => 'L', 'en' => 'ko', 'cn' => '兰考', 'py' => 'lankao', ), 'lanzhou' => array ( 'l' => 'L', 'en' => 'lanzhou', 'cn' => '兰州', 'py' => 'lanzhou', ), 'lb' => array ( 'l' => 'L', 'en' => 'lb', 'cn' => '临沂', 'py' => 'linyi', ), 'le' => array ( 'l' => 'L', 'en' => 'le', 'cn' => '漯河', 'py' => 'luohe', ), 'leshan' => array ( 'l' => 'L', 'en' => 'leshan', 'cn' => '乐山', 'py' => 'leshan', ), 'lf' => array ( 'l' => 'L', 'en' => 'lf', 'cn' => '廊坊', 'py' => 'langfang', ), 'lg' => array ( 'l' => 'L', 'en' => 'lg', 'cn' => '凉山', 'py' => 'liangshan', ), 'lh' => array ( 'l' => 'L', 'en' => 'lh', 'cn' => '林芝', 'py' => 'linzhi', ), 'li' => array ( 'l' => 'L', 'en' => 'li', 'cn' => '辽源', 'py' => 'liaoyuan', ), 'liuzhou' => array ( 'l' => 'L', 'en' => 'liuzhou', 'cn' => '柳州', 'py' => 'liuzhou', ), 'lk' => array ( 'l' => 'L', 'en' => 'lk', 'cn' => '丽水', 'py' => 'lishui', ), 'll' => array ( 'l' => 'L', 'en' => 'll', 'cn' => '吕梁', 'py' => 'lvliang', ), 'ln' => array ( 'l' => 'L', 'en' => 'ln', 'cn' => '临汾', 'py' => 'linfen', ), 'lo' => array ( 'l' => 'L', 'en' => 'lo', 'cn' => '龙岩', 'py' => 'longyan', ), 'loudi' => array ( 'l' => 'L', 'en' => 'loudi', 'cn' => '娄底', 'py' => 'loudi', ), 'lp' => array ( 'l' => 'L', 'en' => 'lp', 'cn' => '六盘水', 'py' => 'liupanshui', ), 'lq' => array ( 'l' => 'L', 'en' => 'lq', 'cn' => '临沧', 'py' => 'lincang', ), 'lt' => array ( 'l' => 'L', 'en' => 'lt', 'cn' => '来宾', 'py' => 'laibin', ), 'luzhou' => array ( 'l' => 'L', 'en' => 'luzhou', 'cn' => '泸州', 'py' => 'luzhou', ), 'lw' => array ( 'l' => 'L', 'en' => 'lw', 'cn' => '莱芜', 'py' => 'laiwu', ), 'lx' => array ( 'l' => 'L', 'en' => 'lx', 'cn' => '辽阳', 'py' => 'liaoyang', ), 'ly' => array ( 'l' => 'L', 'en' => 'ly', 'cn' => '洛阳', 'py' => 'luoyang', ), 'on' => array ( 'l' => 'L', 'en' => 'on', 'cn' => '陇南', 'py' => 'longnan', ), 'un' => array ( 'l' => 'L', 'en' => 'un', 'cn' => '六安', 'py' => 'la', ), 'xi' => array ( 'l' => 'L', 'en' => 'xi', 'cn' => '拉萨', 'py' => 'lasa', ), 'yg' => array ( 'l' => 'L', 'en' => 'yg', 'cn' => '连云港', 'py' => 'lianyugang', ), 'mas' => array ( 'l' => 'M', 'en' => 'mas', 'cn' => '马鞍山', 'py' => 'maanshan', ), 'md' => array ( 'l' => 'M', 'en' => 'md', 'cn' => '牡丹江', 'py' => 'mudanjiang', ), 'me' => array ( 'l' => 'M', 'en' => 'me', 'cn' => '麻城', 'py' => 'macheng', ), 'meishan' => array ( 'l' => 'M', 'en' => 'meishan', 'cn' => '眉山', 'py' => 'meishan', ), 'mh' => array ( 'l' => 'M', 'en' => 'mh', 'cn' => '梅河口', 'py' => 'meihekou', ), 'mianyang' => array ( 'l' => 'M', 'en' => 'mianyang', 'cn' => '绵阳', 'py' => 'mianyang', ), 'mm' => array ( 'l' => 'M', 'en' => 'mm', 'cn' => '茂名', 'py' => 'maoming', ), 'mz' => array ( 'l' => 'M', 'en' => 'mz', 'cn' => '梅州', 'py' => 'meizhou', ), 'en' => array ( 'l' => 'N', 'en' => 'en', 'cn' => '南城', 'py' => 'nancheng', ), 'gx' => array ( 'l' => 'N', 'en' => 'gx', 'cn' => '南宁', 'py' => 'nanning', ), 'nanchong' => array ( 'l' => 'N', 'en' => 'nanchong', 'cn' => '南充', 'py' => 'nanchong', ), 'nanjing' => array ( 'l' => 'N', 'en' => 'nanjing', 'cn' => '南京', 'py' => 'nanjing', ), 'nb' => array ( 'l' => 'N', 'en' => 'nb', 'cn' => '宁波', 'py' => 'ningbo', ), 'nc' => array ( 'l' => 'N', 'en' => 'nc', 'cn' => '南昌', 'py' => 'nanchang', ), 'nd' => array ( 'l' => 'N', 'en' => 'nd', 'cn' => '宁德', 'py' => 'ningde', ), 'ni' => array ( 'l' => 'N', 'en' => 'ni', 'cn' => '怒江', 'py' => 'nujiang', ), 'np' => array ( 'l' => 'N', 'en' => 'np', 'cn' => '南平', 'py' => 'nanping', ), 'nq' => array ( 'l' => 'N', 'en' => 'nq', 'cn' => '那曲', 'py' => 'naqu', ), 'nt' => array ( 'l' => 'N', 'en' => 'nt', 'cn' => '南通', 'py' => 'nantong', ), 'nu' => array ( 'l' => 'N', 'en' => 'nu', 'cn' => '内江', 'py' => 'neijiang', ), 'ny' => array ( 'l' => 'N', 'en' => 'ny', 'cn' => '南阳', 'py' => 'nanyang', ), 'pd' => array ( 'l' => 'P', 'en' => 'pd', 'cn' => '平顶山', 'py' => 'pingdingshan', ), 'pe' => array ( 'l' => 'P', 'en' => 'pe', 'cn' => '普洱', 'py' => 'puer', ), 'pj' => array ( 'l' => 'P', 'en' => 'pj', 'cn' => '盘锦', 'py' => 'panjin', ), 'pl' => array ( 'l' => 'P', 'en' => 'pl', 'cn' => '平凉', 'py' => 'pingliang', ), 'po' => array ( 'l' => 'P', 'en' => 'po', 'cn' => '鄱阳', 'py' => 'poyang', ), 'pu' => array ( 'l' => 'P', 'en' => 'pu', 'cn' => '莆田', 'py' => 'putian', ), 'px' => array ( 'l' => 'P', 'en' => 'px', 'cn' => '萍乡', 'py' => 'pingxiang', ), 'pz' => array ( 'l' => 'P', 'en' => 'pz', 'cn' => '濮阳', 'py' => 'puyang', ), 'pzh' => array ( 'l' => 'P', 'en' => 'pzh', 'cn' => '攀枝花', 'py' => 'panzhihua', ), 'dn' => array ( 'l' => 'Q', 'en' => 'dn', 'cn' => '黔东南', 'py' => 'qiandongnan', ), 'qa' => array ( 'l' => 'Q', 'en' => 'qa', 'cn' => '潜江', 'py' => 'qianjiang', ), 'qb' => array ( 'l' => 'Q', 'en' => 'qb', 'cn' => '黔南布依族苗族自治州', 'py' => 'qiannan', ), 'qc' => array ( 'l' => 'Q', 'en' => 'qc', 'cn' => '蕲春', 'py' => 'qichun', ), 'qd' => array ( 'l' => 'Q', 'en' => 'qd', 'cn' => '青岛', 'py' => 'qingdao', ), 'qg' => array ( 'l' => 'Q', 'en' => 'qg', 'cn' => '庆阳', 'py' => 'qingyang', ), 'qhd' => array ( 'l' => 'Q', 'en' => 'qhd', 'cn' => '秦皇岛', 'py' => 'qinhuangdao', ), 'qinzhou' => array ( 'l' => 'Q', 'en' => 'qinzhou', 'cn' => '钦州', 'py' => 'qinzhou', ), 'qj' => array ( 'l' => 'Q', 'en' => 'qj', 'cn' => '曲靖', 'py' => 'qujing', ), 'qo' => array ( 'l' => 'Q', 'en' => 'qo', 'cn' => '启东', 'py' => 'qidong', ), 'qq' => array ( 'l' => 'Q', 'en' => 'qq', 'cn' => '齐齐哈尔', 'py' => 'qiqihaer', ), 'qt' => array ( 'l' => 'Q', 'en' => 'qt', 'cn' => '七台河', 'py' => 'qitaihe', ), 'quanzhou' => array ( 'l' => 'Q', 'en' => 'quanzhou', 'cn' => '泉州', 'py' => 'quanzhou', ), 'qw' => array ( 'l' => 'Q', 'en' => 'qw', 'cn' => '衢州', 'py' => 'quzhou', ), 'qx' => array ( 'l' => 'Q', 'en' => 'qx', 'cn' => '黔西南', 'py' => 'qianxinan', ), 'qy' => array ( 'l' => 'Q', 'en' => 'qy', 'cn' => '清远', 'py' => 'qingyuan', ), 'rj' => array ( 'l' => 'R', 'en' => 'rj', 'cn' => '瑞金', 'py' => 'ruijin', ), 'rk' => array ( 'l' => 'R', 'en' => 'rk', 'cn' => '日喀则', 'py' => 'rikaze', ), 'ru' => array ( 'l' => 'R', 'en' => 'ru', 'cn' => '汝州', 'py' => 'ruzhou', ), 'rz' => array ( 'l' => 'R', 'en' => 'rz', 'cn' => '日照', 'py' => 'rizhao', ), 'am' => array ( 'l' => 'S', 'en' => 'am', 'cn' => '三明', 'py' => 'sanming', ), 'fh' => array ( 'l' => 'S', 'en' => 'fh', 'cn' => '绥芬河', 'py' => 'suifenhe', ), 'mu' => array ( 'l' => 'S', 'en' => 'mu', 'cn' => '神木', 'py' => 'shenmu', ), 'mx' => array ( 'l' => 'S', 'en' => 'mx', 'cn' => '三门峡', 'py' => 'sanmenxia', ), 'no' => array ( 'l' => 'S', 'en' => 'no', 'cn' => '神农架', 'py' => 'shennongjia', ), 'oy' => array ( 'l' => 'S', 'en' => 'oy', 'cn' => '松原', 'py' => 'songyuan', ), 'sanya' => array ( 'l' => 'S', 'en' => 'sanya', 'cn' => '三亚', 'py' => 'sanya', ), 'sb' => array ( 'l' => 'S', 'en' => 'sb', 'cn' => '邵阳', 'py' => 'shaoyang', ), 'se' => array ( 'l' => 'S', 'en' => 'se', 'cn' => '朔州', 'py' => 'shuozhou', ), 'sf' => array ( 'l' => 'S', 'en' => 'sf', 'cn' => '石嘴山', 'py' => 'shizuishan', ), 'sg' => array ( 'l' => 'S', 'en' => 'sg', 'cn' => '韶关', 'py' => 'shaoguan', ), 'sh' => array ( 'l' => 'S', 'en' => 'sh', 'cn' => '上海', 'py' => 'shanghai', ), 'shantou' => array ( 'l' => 'S', 'en' => 'shantou', 'cn' => '汕头', 'py' => 'shantou', ), 'shaoxing' => array ( 'l' => 'S', 'en' => 'shaoxing', 'cn' => '绍兴', 'py' => 'shaoxing', ), 'si' => array ( 'l' => 'S', 'en' => 'si', 'cn' => '十堰', 'py' => 'shiyan', ), 'sjz' => array ( 'l' => 'S', 'en' => 'sjz', 'cn' => '石家庄', 'py' => 'shijiazhuang', ), 'sk' => array ( 'l' => 'S', 'en' => 'sk', 'cn' => '双鸭山', 'py' => 'shuangyashan', ), 'sl' => array ( 'l' => 'S', 'en' => 'sl', 'cn' => '山南', 'py' => 'shannan', ), 'sm' => array ( 'l' => 'S', 'en' => 'sm', 'cn' => '商丘', 'py' => 'shangqiu', ), 'sp' => array ( 'l' => 'S', 'en' => 'sp', 'cn' => '四平', 'py' => 'siping', ), 'sq' => array ( 'l' => 'S', 'en' => 'sq', 'cn' => '宿迁', 'py' => 'suqian', ), 'sr' => array ( 'l' => 'S', 'en' => 'sr', 'cn' => '上饶', 'py' => 'shangrao', ), 'suining' => array ( 'l' => 'S', 'en' => 'suining', 'cn' => '遂宁', 'py' => 'suining', ), 'suzhou' => array ( 'l' => 'S', 'en' => 'suzhou', 'cn' => '苏州', 'py' => 'suzhou', ), 'sv' => array ( 'l' => 'S', 'en' => 'sv', 'cn' => '绥化', 'py' => 'suihua', ), 'sw' => array ( 'l' => 'S', 'en' => 'sw', 'cn' => '汕尾', 'py' => 'shanwei', ), 'sy' => array ( 'l' => 'S', 'en' => 'sy', 'cn' => '沈阳', 'py' => 'shenyang', ), 'sz' => array ( 'l' => 'S', 'en' => 'sz', 'cn' => '深圳', 'py' => 'shenzhen', ), 'uh' => array ( 'l' => 'S', 'en' => 'uh', 'cn' => '绥中', 'py' => 'suizhong', ), 'ui' => array ( 'l' => 'S', 'en' => 'ui', 'cn' => '随州', 'py' => 'suizhou', ), 'uo' => array ( 'l' => 'S', 'en' => 'uo', 'cn' => '商洛', 'py' => 'shangluo', ), 'us' => array ( 'l' => 'S', 'en' => 'us', 'cn' => '宿松', 'py' => 'susong', ), 'uz' => array ( 'l' => 'S', 'en' => 'uz', 'cn' => '宿州', 'py' => 'suzhou', ), 'taian' => array ( 'l' => 'T', 'en' => 'taian', 'cn' => '泰安', 'py' => 'taian', ), 'taizhou' => array ( 'l' => 'T', 'en' => 'taizhou', 'cn' => '台州', 'py' => 'taizhou', ), 'tangshan' => array ( 'l' => 'T', 'en' => 'tangshan', 'cn' => '唐山', 'py' => 'tangshan', ), 'tb' => array ( 'l' => 'T', 'en' => 'tb', 'cn' => '泰州', 'py' => 'taizhou', ), 'tc' => array ( 'l' => 'T', 'en' => 'tc', 'cn' => '太仓', 'py' => 'taicang', ), 'te' => array ( 'l' => 'T', 'en' => 'te', 'cn' => '铜川', 'py' => 'tongchuan', ), 'th' => array ( 'l' => 'T', 'en' => 'th', 'cn' => '通化', 'py' => 'tonghua', ), 'ti' => array ( 'l' => 'T', 'en' => 'ti', 'cn' => '天水', 'py' => 'tianshui', ), 'tj' => array ( 'l' => 'T', 'en' => 'tj', 'cn' => '天津', 'py' => 'tianjin', ), 'tl' => array ( 'l' => 'T', 'en' => 'tl', 'cn' => '铁岭', 'py' => 'tieling', ), 'tm' => array ( 'l' => 'T', 'en' => 'tm', 'cn' => '天门', 'py' => 'tianmen', ), 'tn' => array ( 'l' => 'T', 'en' => 'tn', 'cn' => '通辽', 'py' => 'tongliao', ), 'to' => array ( 'l' => 'T', 'en' => 'to', 'cn' => '铜陵', 'py' => 'tongling', ), 'tr' => array ( 'l' => 'T', 'en' => 'tr', 'cn' => '铜仁', 'py' => 'tongren', ), 'tx' => array ( 'l' => 'T', 'en' => 'tx', 'cn' => '泰兴', 'py' => 'taixing', ), 'ty' => array ( 'l' => 'T', 'en' => 'ty', 'cn' => '太原', 'py' => 'taiyuan', ), 'ul' => array ( 'l' => 'W', 'en' => 'ul', 'cn' => '乌兰察布', 'py' => 'wulanchabu', ), 'wa' => array ( 'l' => 'W', 'en' => 'wa', 'cn' => '乌海', 'py' => 'wuhai', ), 'wb' => array ( 'l' => 'W', 'en' => 'wb', 'cn' => '吴中', 'py' => 'wuzhong', ), 'weifang' => array ( 'l' => 'W', 'en' => 'weifang', 'cn' => '潍坊', 'py' => 'weifang', ), 'weihai' => array ( 'l' => 'W', 'en' => 'weihai', 'cn' => '威海', 'py' => 'weihai', ), 'wh' => array ( 'l' => 'W', 'en' => 'wh', 'cn' => '武汉', 'py' => 'wuhan', ), 'wj' => array ( 'l' => 'W', 'en' => 'wj', 'cn' => '吴江', 'py' => 'wujiang', ), 'wl' => array ( 'l' => 'W', 'en' => 'wl', 'cn' => '乌兰浩特', 'py' => 'wulanhaote', ), 'wn' => array ( 'l' => 'W', 'en' => 'wn', 'cn' => '渭南', 'py' => 'weinan', ), 'wo' => array ( 'l' => 'W', 'en' => 'wo', 'cn' => '梧州', 'py' => 'wuzhou', ), 'ws' => array ( 'l' => 'W', 'en' => 'ws', 'cn' => '文山', 'py' => 'wenshan', ), 'wu' => array ( 'l' => 'W', 'en' => 'wu', 'cn' => '芜湖', 'py' => 'wuhu', ), 'ww' => array ( 'l' => 'W', 'en' => 'ww', 'cn' => '武威', 'py' => 'wuwei', ), 'wx' => array ( 'l' => 'W', 'en' => 'wx', 'cn' => '无锡', 'py' => 'wuxi', ), 'wz' => array ( 'l' => 'W', 'en' => 'wz', 'cn' => '温州', 'py' => 'wenzhou', ), 'xj' => array ( 'l' => 'W', 'en' => 'xj', 'cn' => '乌鲁木齐', 'py' => 'wulumuqi', ), 'ax' => array ( 'l' => 'X', 'en' => 'ax', 'cn' => '仙桃', 'py' => 'xiantao', ), 'ck' => array ( 'l' => 'X', 'en' => 'ck', 'cn' => '西昌', 'py' => 'xichang', ), 'ge' => array ( 'l' => 'X', 'en' => 'ge', 'cn' => '锡林郭勒', 'py' => 'xilinguole', ), 'hk' => array ( 'l' => 'X', 'en' => 'hk', 'cn' => '香港', 'py' => 'xianggang', ), 'ib' => array ( 'l' => 'X', 'en' => 'ib', 'cn' => '湘西', 'py' => 'xiangxi', ), 'im' => array ( 'l' => 'X', 'en' => 'im', 'cn' => '辛集', 'py' => 'xinji', ), 'sx' => array ( 'l' => 'X', 'en' => 'sx', 'cn' => '西安', 'py' => 'xian', ), 'uc' => array ( 'l' => 'X', 'en' => 'uc', 'cn' => '宣城', 'py' => 'xuancheng', ), 'xa' => array ( 'l' => 'X', 'en' => 'xa', 'cn' => '邢台', 'py' => 'xingtai', ), 'xb' => array ( 'l' => 'X', 'en' => 'xb', 'cn' => '信阳', 'py' => 'xinyang', ), 'xc' => array ( 'l' => 'X', 'en' => 'xc', 'cn' => '忻州', 'py' => 'xinzhou', ), 'xd' => array ( 'l' => 'X', 'en' => 'xd', 'cn' => '咸宁', 'py' => 'xianning', ), 'xe' => array ( 'l' => 'X', 'en' => 'xe', 'cn' => '兴安盟', 'py' => 'xinganmeng', ), 'xf' => array ( 'l' => 'X', 'en' => 'xf', 'cn' => '襄阳', 'py' => 'xiangyang', ), 'xg' => array ( 'l' => 'X', 'en' => 'xg', 'cn' => '兴义', 'py' => 'xingyi', ), 'xh' => array ( 'l' => 'X', 'en' => 'xh', 'cn' => '孝感', 'py' => 'xiaogan', ), 'xiangtan' => array ( 'l' => 'X', 'en' => 'xiangtan', 'cn' => '湘潭', 'py' => 'xiangtan', ), 'xining' => array ( 'l' => 'X', 'en' => 'xining', 'cn' => '西宁', 'py' => 'xining', ), 'xm' => array ( 'l' => 'X', 'en' => 'xm', 'cn' => '厦门', 'py' => 'xiamen', ), 'xo' => array ( 'l' => 'X', 'en' => 'xo', 'cn' => '新余', 'py' => 'xinyu', ), 'xq' => array ( 'l' => 'X', 'en' => 'xq', 'cn' => '新蔡', 'py' => 'xincai', ), 'xs' => array ( 'l' => 'X', 'en' => 'xs', 'cn' => '西双版纳', 'py' => 'xishuangbanna', ), 'xu' => array ( 'l' => 'X', 'en' => 'xu', 'cn' => '许昌', 'py' => 'xuchang', ), 'xx' => array ( 'l' => 'X', 'en' => 'xx', 'cn' => '新乡', 'py' => 'xinxiang', ), 'xy' => array ( 'l' => 'X', 'en' => 'xy', 'cn' => '咸阳', 'py' => 'xianyang', ), 'xz' => array ( 'l' => 'X', 'en' => 'xz', 'cn' => '徐州', 'py' => 'xuzhou', ), 'ii' => array ( 'l' => 'Y', 'en' => 'ii', 'cn' => '伊犁', 'py' => 'yili', ), 'og' => array ( 'l' => 'Y', 'en' => 'og', 'cn' => '永城', 'py' => 'yongcheng', ), 'ub' => array ( 'l' => 'Y', 'en' => 'ub', 'cn' => '榆林', 'py' => 'yulin', ), 'ur' => array ( 'l' => 'Y', 'en' => 'ur', 'cn' => '玉树', 'py' => 'yushu', ), 'ya' => array ( 'l' => 'Y', 'en' => 'ya', 'cn' => '盐城', 'py' => 'yancheng', ), 'yd' => array ( 'l' => 'Y', 'en' => 'yd', 'cn' => '扬州', 'py' => 'yangzhou', ), 'ye' => array ( 'l' => 'Y', 'en' => 'ye', 'cn' => '延吉', 'py' => 'yanji', ), 'yf' => array ( 'l' => 'Y', 'en' => 'yf', 'cn' => '云浮', 'py' => 'yunfu', ), 'yh' => array ( 'l' => 'Y', 'en' => 'yh', 'cn' => '雅安', 'py' => 'yaan', ), 'yibin' => array ( 'l' => 'Y', 'en' => 'yibin', 'cn' => '宜宾', 'py' => 'yibin', ), 'yichang' => array ( 'l' => 'Y', 'en' => 'yichang', 'cn' => '宜昌', 'py' => 'yichang', ), 'yinchuan' => array ( 'l' => 'Y', 'en' => 'yinchuan', 'cn' => '银川', 'py' => 'yinchuan', ), 'yiyang' => array ( 'l' => 'Y', 'en' => 'yiyang', 'cn' => '益阳', 'py' => 'yiyang', ), 'yj' => array ( 'l' => 'Y', 'en' => 'yj', 'cn' => '阳江', 'py' => 'yangjiang', ), 'yk' => array ( 'l' => 'Y', 'en' => 'yk', 'cn' => '营口', 'py' => 'yingkou', ), 'yl' => array ( 'l' => 'Y', 'en' => 'yl', 'cn' => '玉林', 'py' => 'yulin', ), 'ym' => array ( 'l' => 'Y', 'en' => 'ym', 'cn' => '伊春', 'py' => 'yichun', ), 'yongzhou' => array ( 'l' => 'Y', 'en' => 'yongzhou', 'cn' => '永州', 'py' => 'yongzhou', ), 'yq' => array ( 'l' => 'Y', 'en' => 'yq', 'cn' => '阳泉', 'py' => 'yangquan', ), 'yr' => array ( 'l' => 'Y', 'en' => 'yr', 'cn' => '鹰潭', 'py' => 'yingtan', ), 'ys' => array ( 'l' => 'Y', 'en' => 'ys', 'cn' => '玉溪', 'py' => 'yuxi', ), 'yt' => array ( 'l' => 'Y', 'en' => 'yt', 'cn' => '烟台', 'py' => 'yantai', ), 'yu' => array ( 'l' => 'Y', 'en' => 'yu', 'cn' => '运城', 'py' => 'yuncheng', ), 'yueyang' => array ( 'l' => 'Y', 'en' => 'yueyang', 'cn' => '岳阳', 'py' => 'yueyang', ), 'yw' => array ( 'l' => 'Y', 'en' => 'yw', 'cn' => '义乌', 'py' => 'yiwu', ), 'yx' => array ( 'l' => 'Y', 'en' => 'yx', 'cn' => '宜兴', 'py' => 'yixing', ), 'zi' => array ( 'l' => 'Y', 'en' => 'zi', 'cn' => '延安', 'py' => 'yanan', ), 'ey' => array ( 'l' => 'Z', 'en' => 'ey', 'cn' => '镇远', 'py' => 'zhenyuan', ), 'hn' => array ( 'l' => 'Z', 'en' => 'hn', 'cn' => '郑州', 'py' => 'zhengzhou', ), 'jg' => array ( 'l' => 'Z', 'en' => 'jg', 'cn' => '张家港', 'py' => 'zhangjiagang', ), 'zb' => array ( 'l' => 'Z', 'en' => 'zb', 'cn' => '淄博', 'py' => 'zibo', ), 'zc' => array ( 'l' => 'Z', 'en' => 'zc', 'cn' => '湛江', 'py' => 'zhanjiang', ), 'zd' => array ( 'l' => 'Z', 'en' => 'zd', 'cn' => '镇江', 'py' => 'zhenjiang', ), 'ze' => array ( 'l' => 'Z', 'en' => 'ze', 'cn' => '舟山', 'py' => 'zhoushan', ), 'zhongshan' => array ( 'l' => 'Z', 'en' => 'zhongshan', 'cn' => '中山', 'py' => 'zhongshan', ), 'zhuhai' => array ( 'l' => 'Z', 'en' => 'zhuhai', 'cn' => '珠海', 'py' => 'zhuhai', ), 'zigong' => array ( 'l' => 'Z', 'en' => 'zigong', 'cn' => '自贡', 'py' => 'zigong', ), 'zjj' => array ( 'l' => 'Z', 'en' => 'zjj', 'cn' => '张家界', 'py' => 'zhangjiajie', ), 'zjk' => array ( 'l' => 'Z', 'en' => 'zjk', 'cn' => '张家口', 'py' => 'zhangjiakou', ), 'zk' => array ( 'l' => 'Z', 'en' => 'zk', 'cn' => '周口', 'py' => 'zhoukou', ), 'zm' => array ( 'l' => 'Z', 'en' => 'zm', 'cn' => '驻马店', 'py' => 'zhumadian', ), 'zn' => array ( 'l' => 'Z', 'en' => 'zn', 'cn' => '张掖', 'py' => 'zhangye', ), 'zo' => array ( 'l' => 'Z', 'en' => 'zo', 'cn' => '漳州', 'py' => 'zhangzhou', ), 'zp' => array ( 'l' => 'Z', 'en' => 'zp', 'cn' => '诸暨', 'py' => 'zhuji', ), 'zq' => array ( 'l' => 'Z', 'en' => 'zq', 'cn' => '肇庆', 'py' => 'zhaoqing', ), 'zr' => array ( 'l' => 'Z', 'en' => 'zr', 'cn' => '资阳', 'py' => 'ziyang', ), 'zt' => array ( 'l' => 'Z', 'en' => 'zt', 'cn' => '昭通', 'py' => 'zhaotong', ), 'zu' => array ( 'l' => 'Z', 'en' => 'zu', 'cn' => '枣庄', 'py' => 'zaozhuang', ), 'zw' => array ( 'l' => 'Z', 'en' => 'zw', 'cn' => '中卫', 'py' => 'zhongwei', ), 'zy' => array ( 'l' => 'Z', 'en' => 'zy', 'cn' => '遵义', 'py' => 'zunyi', ), 'zz' => array ( 'l' => 'Z', 'en' => 'zz', 'cn' => '株洲', 'py' => 'zhuzhou', ), ), 'CMS' => array ( 'alsm' => array ( 'en' => 'aa', 'cn' => '阿拉善盟', 'py' => 'alashanmeng', ), 'aba' => array ( 'en' => 'ab', 'cn' => '阿坝', 'py' => 'aba', ), 'liaocheng' => array ( 'en' => 'ac', 'cn' => '聊城', 'py' => 'liaocheng', ), 'ad' => array ( 'en' => 'ad', 'cn' => '澳大利亚', 'py' => 'aodaliya', ), 'ae' => array ( 'en' => 'ae', 'cn' => '阿联酋', 'py' => 'alianqiu', ), 'anfu' => array ( 'en' => 'af', 'cn' => '安福', 'py' => 'anfu', ), 'jinchang' => array ( 'en' => 'ag', 'cn' => '金昌', 'py' => 'jinchang', ), 'anqing' => array ( 'en' => 'ai', 'cn' => '安庆', 'py' => 'anqing', ), 'baoji' => array ( 'en' => 'aj', 'cn' => '宝鸡', 'py' => 'baoji', ), 'ankang' => array ( 'en' => 'ak', 'cn' => '安康', 'py' => 'ankang', ), 'ali' => array ( 'en' => 'al', 'cn' => '阿里', 'py' => 'ali', ), 'sanming' => array ( 'en' => 'am', 'cn' => '三明', 'py' => 'sanming', ), 'anshun' => array ( 'en' => 'an', 'cn' => '安顺', 'py' => 'anshun', ), 'anshan' => array ( 'en' => 'anshan', 'cn' => '鞍山', 'py' => 'anshan', ), 'xiantao' => array ( 'en' => 'ax', 'cn' => '仙桃', 'py' => 'xiantao', ), 'anyang' => array ( 'en' => 'ay', 'cn' => '安阳', 'py' => 'anyang', ), 'hanzhong' => array ( 'en' => 'az', 'cn' => '汉中', 'py' => 'hanzhong', ), 'bd' => array ( 'en' => 'baoding', 'cn' => '保定', 'py' => 'baoding', ), 'bengbu' => array ( 'en' => 'bb', 'cn' => '蚌埠', 'py' => 'bengbu', ), 'baise' => array ( 'en' => 'bc', 'cn' => '百色', 'py' => 'baise', ), 'bijie' => array ( 'en' => 'be', 'cn' => '毕节', 'py' => 'bijie', ), 'beihai' => array ( 'en' => 'beihai', 'cn' => '北海', 'py' => 'beihai', ), 'baicheng' => array ( 'en' => 'bf', 'cn' => '白城', 'py' => 'baicheng', ), 'bygl' => array ( 'en' => 'bg', 'cn' => '巴音郭楞', 'py' => 'bayinguoleng', ), 'bi' => array ( 'en' => 'bi', 'cn' => '英国', 'py' => 'yingguo', ), 'bj' => array ( 'en' => 'bj', 'cn' => '北京', 'py' => 'beijing', ), 'baishan' => array ( 'en' => 'bk', 'cn' => '白山', 'py' => 'baishan', ), 'bm' => array ( 'en' => 'bm', 'cn' => '巴哈马联邦', 'py' => 'bahama', ), 'binzhou' => array ( 'en' => 'bn', 'cn' => '滨州', 'py' => 'binzhou', ), 'bozhou' => array ( 'en' => 'bo', 'cn' => '亳州', 'py' => 'bozhou', ), 'boao' => array ( 'en' => 'boao', 'cn' => '博鳌', 'py' => 'boao', ), 'baoshan' => array ( 'en' => 'bs', 'cn' => '保山', 'py' => 'baoshan', ), 'bt' => array ( 'en' => 'bt', 'cn' => '包头', 'py' => 'baotou', ), 'benxi' => array ( 'en' => 'bx', 'cn' => '本溪', 'py' => 'benxi', ), 'by' => array ( 'en' => 'by', 'cn' => '西班牙', 'py' => 'xibanya', ), 'bazhong' => array ( 'en' => 'bz', 'cn' => '巴中', 'py' => 'bazhong', ), 'chengde' => array ( 'en' => 'ce', 'cn' => '承德', 'py' => 'chengde', ), 'chifeng' => array ( 'en' => 'cf', 'cn' => '赤峰', 'py' => 'chifeng', ), 'changdu' => array ( 'en' => 'cg', 'cn' => '昌都', 'py' => 'changdu', ), 'changde' => array ( 'en' => 'changde', 'cn' => '常德', 'py' => 'changde', ), 'changshu' => array ( 'en' => 'changshu', 'cn' => '常熟', 'py' => 'changshu', ), 'chenzhou' => array ( 'en' => 'chenzhou', 'cn' => '郴州', 'py' => 'chenzhou', ), 'changzhi' => array ( 'en' => 'ci', 'cn' => '长治', 'py' => 'changzhi', ), 'chuzhou' => array ( 'en' => 'cj', 'cn' => '滁州', 'py' => 'chuzhou', ), 'xichang' => array ( 'en' => 'ck', 'cn' => '西昌', 'py' => 'xichang', ), 'chaohu' => array ( 'en' => 'cl', 'cn' => '巢湖', 'py' => 'chaohu', ), 'changyuan' => array ( 'en' => 'cm', 'cn' => '长垣', 'py' => 'changyuan', ), 'changtu' => array ( 'en' => 'cn', 'cn' => '昌图', 'py' => 'changtu', ), 'cangzhou' => array ( 'en' => 'co', 'cn' => '沧州', 'py' => 'cangzhou', ), 'cp' => array ( 'en' => 'cp', 'cn' => '塞浦路斯', 'py' => 'saipulusi', ), 'cq' => array ( 'en' => 'cq', 'cn' => '重庆', 'py' => 'chongqing', ), 'cs' => array ( 'en' => 'cs', 'cn' => '长沙', 'py' => 'changsha', ), 'chongzuo' => array ( 'en' => 'ct', 'cn' => '崇左', 'py' => 'chongzuo', ), 'chaozhou' => array ( 'en' => 'cu', 'cn' => '潮州', 'py' => 'chaozhou', ), 'cw' => array ( 'en' => 'cw', 'cn' => '圣基茨和尼维斯联邦', 'py' => 'shengjiciheniweisili', ), 'chuxiong' => array ( 'en' => 'cx', 'cn' => '楚雄', 'py' => 'chuxiong', ), 'chaoyang' => array ( 'en' => 'cy', 'cn' => '朝阳', 'py' => 'chaoyang', ), 'cz' => array ( 'en' => 'cz', 'cn' => '常州', 'py' => 'changzhou', ), 'dali' => array ( 'en' => 'da', 'cn' => '大理', 'py' => 'dali', ), 'daqing' => array ( 'en' => 'daqing', 'cn' => '大庆', 'py' => 'daqing', ), 'dazhou' => array ( 'en' => 'dazhou', 'cn' => '达州', 'py' => 'dazhou', ), 'haidong' => array ( 'en' => 'db', 'cn' => '海东', 'py' => 'haidong', ), 'dingzhou' => array ( 'en' => 'dc', 'cn' => '定州', 'py' => 'dingzhou', ), 'dandong' => array ( 'en' => 'dd', 'cn' => '丹东', 'py' => 'dandong', ), 'deyang' => array ( 'en' => 'deyang', 'cn' => '德阳', 'py' => 'deyang', ), 'dg' => array ( 'en' => 'dg', 'cn' => '东莞', 'py' => 'dongguan', ), 'dehong' => array ( 'en' => 'dh', 'cn' => '德宏', 'py' => 'dehong', ), 'diqing' => array ( 'en' => 'di', 'cn' => '迪庆', 'py' => 'diqing', ), 'cj' => array ( 'en' => 'dj', 'cn' => '昌吉', 'py' => 'changji', ), 'dl' => array ( 'en' => 'dl', 'cn' => '大连', 'py' => 'dalian', ), 'qiandn' => array ( 'en' => 'dn', 'cn' => '黔东南', 'py' => 'qiandongnan', ), 'dengzhou' => array ( 'en' => 'do', 'cn' => '邓州', 'py' => 'dengzhou', ), 'luyi' => array ( 'en' => 'dr', 'cn' => '鹿邑', 'py' => 'luyi', ), 'datong' => array ( 'en' => 'dt', 'cn' => '大同', 'py' => 'datong', ), 'dezhou' => array ( 'en' => 'du', 'cn' => '德州', 'py' => 'dezhou', ), 'dingxi' => array ( 'en' => 'dx', 'cn' => '定西', 'py' => 'dingxi', ), 'dy' => array ( 'en' => 'dy', 'cn' => '东营', 'py' => 'dongying', ), 'haibei' => array ( 'en' => 'ea', 'cn' => '海北', 'py' => 'haibei', ), 'eeds' => array ( 'en' => 'eeds', 'cn' => '鄂尔多斯', 'py' => 'eerduosi', ), 'hegang' => array ( 'en' => 'eg', 'cn' => '鹤岗', 'py' => 'hegang', ), 'heze' => array ( 'en' => 'eh', 'cn' => '菏泽', 'py' => 'heze', ), 'heihe' => array ( 'en' => 'ei', 'cn' => '黑河', 'py' => 'heihe', ), 'nancheng' => array ( 'en' => 'en', 'cn' => '南城', 'py' => 'nancheng', ), 'hlbe' => array ( 'en' => 'er', 'cn' => '呼伦贝尔', 'py' => 'hulunbeier', ), 'enshi' => array ( 'en' => 'es', 'cn' => '恩施', 'py' => 'enshi', ), 'zhenyuan' => array ( 'en' => 'ey', 'cn' => '镇远', 'py' => 'zhenyuan', ), 'ezhou' => array ( 'en' => 'ez', 'cn' => '鄂州', 'py' => 'ezhou', ), 'fushun' => array ( 'en' => 'fa', 'cn' => '抚顺', 'py' => 'fushun', ), 'fcg' => array ( 'en' => 'fcg', 'cn' => '防城港', 'py' => 'fangchenggang', ), 'fengcheng' => array ( 'en' => 'fe', 'cn' => '丰城', 'py' => 'fengcheng', ), 'fugu' => array ( 'en' => 'fg', 'cn' => '府谷', 'py' => 'fugu', ), 'sfh' => array ( 'en' => 'fh', 'cn' => '绥芬河', 'py' => 'suifenhe', ), 'fj' => array ( 'en' => 'fj', 'cn' => '福州', 'py' => 'fuzhou', ), 'fuzhou' => array ( 'en' => 'fo', 'cn' => '抚州', 'py' => 'fuzhou', ), 'fuquan' => array ( 'en' => 'fq', 'cn' => '福泉', 'py' => 'fuquan', ), 'fr' => array ( 'en' => 'fr', 'cn' => '法国', 'py' => 'faguo', ), 'fs' => array ( 'en' => 'fs', 'cn' => '佛山', 'py' => 'foshan', ), 'fuyuan' => array ( 'en' => 'fu', 'cn' => '抚远', 'py' => 'fuyuan', ), 'fuxin' => array ( 'en' => 'fx', 'cn' => '阜新', 'py' => 'fuxin', ), 'fuyang' => array ( 'en' => 'fy', 'cn' => '阜阳', 'py' => 'fuyang', ), 'guangan' => array ( 'en' => 'ga', 'cn' => '广安', 'py' => 'guangan', ), 'ganzhou' => array ( 'en' => 'ganzhou', 'cn' => '赣州', 'py' => 'ganzhou', ), 'gannan' => array ( 'en' => 'gb', 'cn' => '甘南', 'py' => 'gannan', ), 'guyuan' => array ( 'en' => 'gc', 'cn' => '固原', 'py' => 'guyuan', ), 'guangde' => array ( 'en' => 'gd', 'cn' => '广德', 'py' => 'guangde', ), 'xlgl' => array ( 'en' => 'ge', 'cn' => '锡林郭勒', 'py' => 'xilinguole', ), 'guoluo' => array ( 'en' => 'gf', 'cn' => '果洛', 'py' => 'guoluo', ), 'guigang' => array ( 'en' => 'gg', 'cn' => '贵港', 'py' => 'guigang', ), 'guangyuan' => array ( 'en' => 'gi', 'cn' => '广元', 'py' => 'guangyuan', ), 'gm' => array ( 'en' => 'gm', 'cn' => '德国', 'py' => 'deguo', ), 'gongyi' => array ( 'en' => 'go', 'cn' => '巩义', 'py' => 'gongyi', ), 'gqc' => array ( 'en' => 'gq', 'cn' => '共青城', 'py' => 'gongqingcheng', ), 'ganzi' => array ( 'en' => 'gs', 'cn' => '甘孜', 'py' => 'ganzi', ), 'gushi' => array ( 'en' => 'gu', 'cn' => '固始', 'py' => 'gushi', ), 'guilin' => array ( 'en' => 'guilin', 'cn' => '桂林', 'py' => 'guilin', ), 'guizhou' => array ( 'en' => 'guizhou', 'cn' => '贵州', 'py' => 'guizhou', ), 'gx' => array ( 'en' => 'gx', 'cn' => '广西', 'py' => 'guangxi', ), 'gz' => array ( 'en' => 'gz', 'cn' => '广州', 'py' => 'guangzhou', ), 'hrb' => array ( 'en' => 'h', 'cn' => '哈尔滨', 'py' => 'haerbin', ), 'han' => array ( 'en' => 'han', 'cn' => '海南', 'py' => 'hainan', ), 'handan' => array ( 'en' => 'handan', 'cn' => '邯郸', 'py' => 'handan', ), 'hz' => array ( 'en' => 'hangzhou', 'cn' => '杭州', 'py' => 'hangzhou', ), 'heyuan' => array ( 'en' => 'hb', 'cn' => '河源', 'py' => 'heyuan', ), 'huainan' => array ( 'en' => 'hc', 'cn' => '淮南', 'py' => 'huainan', ), 'huaibei' => array ( 'en' => 'he', 'cn' => '淮北', 'py' => 'huaibei', ), 'hengyang' => array ( 'en' => 'hengyang', 'cn' => '衡阳', 'py' => 'hengyang', ), 'hf' => array ( 'en' => 'hf', 'cn' => '合肥', 'py' => 'hefei', ), 'huanggang' => array ( 'en' => 'hg', 'cn' => '黄冈', 'py' => 'huanggang', ), 'hh' => array ( 'en' => 'hh', 'cn' => '怀化', 'py' => 'huaihua', ), 'hhht' => array ( 'en' => 'hhht', 'cn' => '呼和浩特', 'py' => 'huhehaote', ), 'huaian' => array ( 'en' => 'hj', 'cn' => '淮安', 'py' => 'huaian', ), 'hk' => array ( 'en' => 'hk', 'cn' => '香港', 'py' => 'xianggang', ), 'hld' => array ( 'en' => 'hl', 'cn' => '葫芦岛', 'py' => 'huludao', ), 'haimen' => array ( 'en' => 'hm', 'cn' => '海门', 'py' => 'haimen', ), 'hn' => array ( 'en' => 'hn', 'cn' => '郑州', 'py' => 'zhengzhou', ), 'huzhou' => array ( 'en' => 'ho', 'cn' => '湖州', 'py' => 'huzhou', ), 'honghe' => array ( 'en' => 'hq', 'cn' => '红河', 'py' => 'honghe', ), 'huangshan' => array ( 'en' => 'hr', 'cn' => '黄山', 'py' => 'huangshan', ), 'hengshui' => array ( 'en' => 'hs', 'cn' => '衡水', 'py' => 'hengshui', ), 'hezhou' => array ( 'en' => 'ht', 'cn' => '贺州', 'py' => 'hezhou', ), 'huangshi' => array ( 'en' => 'huangshi', 'cn' => '黄石', 'py' => 'huangshi', ), 'huizhou' => array ( 'en' => 'huizhou', 'cn' => '惠州', 'py' => 'huizhou', ), 'hebi' => array ( 'en' => 'hw', 'cn' => '鹤壁', 'py' => 'hebi', ), 'hechi' => array ( 'en' => 'hx', 'cn' => '河池', 'py' => 'hechi', ), 'baiyin' => array ( 'en' => 'ia', 'cn' => '白银', 'py' => 'baiyin', ), 'xiangxi' => array ( 'en' => 'ib', 'cn' => '湘西', 'py' => 'xiangxi', ), 'dxal' => array ( 'en' => 'ig', 'cn' => '大兴安岭', 'py' => 'daxinganling', ), 'hain' => array ( 'en' => 'ih', 'cn' => '海南藏族自治州', 'py' => 'hainanzangzuzizhizho', ), 'yili' => array ( 'en' => 'ii', 'cn' => '伊犁', 'py' => 'yili', ), 'xinji' => array ( 'en' => 'im', 'cn' => '辛集', 'py' => 'xinji', ), 'jn' => array ( 'en' => 'in', 'cn' => '集宁', 'py' => 'jining', ), 'liping' => array ( 'en' => 'ip', 'cn' => '黎平', 'py' => 'liping', ), 'it' => array ( 'en' => 'it', 'cn' => '意大利', 'py' => 'yidali', ), 'chizhou' => array ( 'en' => 'iu', 'cn' => '池州', 'py' => 'chizhou', ), 'linxia' => array ( 'en' => 'ix', 'cn' => '临夏', 'py' => 'linxia', ), 'jinzhou' => array ( 'en' => 'ja', 'cn' => '锦州', 'py' => 'jinzhou', ), 'jincheng' => array ( 'en' => 'jc', 'cn' => '晋城', 'py' => 'jincheng', ), 'jingmen' => array ( 'en' => 'jd', 'cn' => '荆门', 'py' => 'jingmen', ), 'jieyang' => array ( 'en' => 'je', 'cn' => '揭阳', 'py' => 'jieyang', ), 'jian' => array ( 'en' => 'jf', 'cn' => '吉安', 'py' => 'jian', ), 'zjg' => array ( 'en' => 'jg', 'cn' => '张家港', 'py' => 'zhangjiagang', ), 'jinhua' => array ( 'en' => 'jh', 'cn' => '金华', 'py' => 'jinhua', ), 'jiaozuo' => array ( 'en' => 'ji', 'cn' => '焦作', 'py' => 'jiaozuo', ), 'jiangmen' => array ( 'en' => 'jiangmen', 'cn' => '江门', 'py' => 'jiangmen', ), 'jilin' => array ( 'en' => 'jilin', 'cn' => '吉林', 'py' => 'jilin', ), 'jingzhou' => array ( 'en' => 'jingzhou', 'cn' => '荆州', 'py' => 'jingzhou', ), 'jinzhong' => array ( 'en' => 'jinzhong', 'cn' => '晋中', 'py' => 'jinzhong', ), 'jiujiang' => array ( 'en' => 'jiujiang', 'cn' => '九江', 'py' => 'jiujiang', ), 'jinmen' => array ( 'en' => 'jk', 'cn' => '金门', 'py' => 'jinmen', ), 'cc' => array ( 'en' => 'jl', 'cn' => '长春', 'py' => 'changchun', ), 'jining' => array ( 'en' => 'jn', 'cn' => '济宁', 'py' => 'jining', ), 'jiyuan' => array ( 'en' => 'jp', 'cn' => '济源', 'py' => 'jiyuan', ), 'jiuquan' => array ( 'en' => 'jq', 'cn' => '酒泉', 'py' => 'jiuquan', ), 'jishou' => array ( 'en' => 'js', 'cn' => '吉首', 'py' => 'jishou', ), 'jyg' => array ( 'en' => 'ju', 'cn' => '嘉峪关', 'py' => 'jiayuguan', ), 'jixi' => array ( 'en' => 'jv', 'cn' => '鸡西', 'py' => 'jixi', ), 'jdz' => array ( 'en' => 'jw', 'cn' => '景德镇', 'py' => 'jingdezhen', ), 'jiaxing' => array ( 'en' => 'jx', 'cn' => '嘉兴', 'py' => 'jiaxing', ), 'jiangyin' => array ( 'en' => 'jy', 'cn' => '江阴', 'py' => 'jiangyin', ), 'kashi' => array ( 'en' => 'ka', 'cn' => '喀什', 'py' => 'kashi', ), 'kf' => array ( 'en' => 'kf', 'cn' => '开封', 'py' => 'kaifeng', ), 'kaili' => array ( 'en' => 'kl', 'cn' => '凯里', 'py' => 'kaili', ), 'lankao' => array ( 'en' => 'ko', 'cn' => '兰考', 'py' => 'lankao', ), 'ks' => array ( 'en' => 'ks', 'cn' => '昆山', 'py' => 'kunshan', ), 'lz' => array ( 'en' => 'lanzhou', 'cn' => '兰州', 'py' => 'lanzhou', ), 'linyi' => array ( 'en' => 'lb', 'cn' => '临沂', 'py' => 'linyi', ), 'liyang' => array ( 'en' => 'lc', 'cn' => '溧阳', 'py' => 'liyang', ), 'luohe' => array ( 'en' => 'le', 'cn' => '漯河', 'py' => 'luohe', ), 'leshan' => array ( 'en' => 'leshan', 'cn' => '乐山', 'py' => 'leshan', ), 'langfang' => array ( 'en' => 'lf', 'cn' => '廊坊', 'py' => 'langfang', ), 'liangshan' => array ( 'en' => 'lg', 'cn' => '凉山', 'py' => 'liangshan', ), 'linzhi' => array ( 'en' => 'lh', 'cn' => '林芝', 'py' => 'linzhi', ), 'liaoyuan' => array ( 'en' => 'li', 'cn' => '辽源', 'py' => 'liaoyuan', ), 'liuzhou' => array ( 'en' => 'liuzhou', 'cn' => '柳州', 'py' => 'liuzhou', ), 'lishui' => array ( 'en' => 'lk', 'cn' => '丽水', 'py' => 'lishui', ), 'lvliang' => array ( 'en' => 'll', 'cn' => '吕梁', 'py' => 'lvliang', ), 'linfen' => array ( 'en' => 'ln', 'cn' => '临汾', 'py' => 'linfen', ), 'longyan' => array ( 'en' => 'lo', 'cn' => '龙岩', 'py' => 'longyan', ), 'loudi' => array ( 'en' => 'loudi', 'cn' => '娄底', 'py' => 'loudi', ), 'lps' => array ( 'en' => 'lp', 'cn' => '六盘水', 'py' => 'liupanshui', ), 'lincang' => array ( 'en' => 'lq', 'cn' => '临沧', 'py' => 'lincang', ), 'laibin' => array ( 'en' => 'lt', 'cn' => '来宾', 'py' => 'laibin', ), 'luzhou' => array ( 'en' => 'luzhou', 'cn' => '泸州', 'py' => 'luzhou', ), 'laiwu' => array ( 'en' => 'lw', 'cn' => '莱芜', 'py' => 'laiwu', ), 'liaoyang' => array ( 'en' => 'lx', 'cn' => '辽阳', 'py' => 'liaoyang', ), 'ly' => array ( 'en' => 'ly', 'cn' => '洛阳', 'py' => 'luoyang', ), 'mas' => array ( 'en' => 'mas', 'cn' => '马鞍山', 'py' => 'maanshan', ), 'macao' => array ( 'en' => 'mc', 'cn' => '澳门', 'py' => 'aomen', ), 'mdj' => array ( 'en' => 'md', 'cn' => '牡丹江', 'py' => 'mudanjiang', ), 'macheng' => array ( 'en' => 'me', 'cn' => '麻城', 'py' => 'macheng', ), 'meishan' => array ( 'en' => 'meishan', 'cn' => '眉山', 'py' => 'meishan', ), 'mg' => array ( 'en' => 'mg', 'cn' => '美国', 'py' => 'meiguo', ), 'mhk' => array ( 'en' => 'mh', 'cn' => '梅河口', 'py' => 'meihekou', ), 'hami' => array ( 'en' => 'mi', 'cn' => '哈密', 'py' => 'hami', ), 'mianyang' => array ( 'en' => 'mianyang', 'cn' => '绵阳', 'py' => 'mianyang', ), 'mj' => array ( 'en' => 'mj', 'cn' => '加拿大', 'py' => 'jianada', ), 'ml' => array ( 'en' => 'ml', 'cn' => '马来西亚', 'py' => 'malaixiya', ), 'maoming' => array ( 'en' => 'mm', 'cn' => '茂名', 'py' => 'maoming', ), 'shenmu' => array ( 'en' => 'mu', 'cn' => '神木', 'py' => 'shenmu', ), 'smx' => array ( 'en' => 'mx', 'cn' => '三门峡', 'py' => 'sanmenxia', ), 'meizhou' => array ( 'en' => 'mz', 'cn' => '梅州', 'py' => 'meizhou', ), 'nanchong' => array ( 'en' => 'nanchong', 'cn' => '南充', 'py' => 'nanchong', ), 'nj' => array ( 'en' => 'nanjing', 'cn' => '南京', 'py' => 'nanjing', ), 'nb' => array ( 'en' => 'nb', 'cn' => '宁波', 'py' => 'ningbo', ), 'nc' => array ( 'en' => 'nc', 'cn' => '南昌', 'py' => 'nanchang', ), 'ningde' => array ( 'en' => 'nd', 'cn' => '宁德', 'py' => 'ningde', ), 'byne' => array ( 'en' => 'ne', 'cn' => '巴彦淖尔', 'py' => 'bayannaoer', ), 'nujiang' => array ( 'en' => 'ni', 'cn' => '怒江', 'py' => 'nujiang', ), 'nk' => array ( 'en' => 'nk', 'cn' => '韩国', 'py' => 'hanguo', ), 'nn' => array ( 'en' => 'nn', 'cn' => '海宁', 'py' => 'haining', ), 'snj' => array ( 'en' => 'no', 'cn' => '神农架', 'py' => 'shennongjia', ), 'nanping' => array ( 'en' => 'np', 'cn' => '南平', 'py' => 'nanping', ), 'naqu' => array ( 'en' => 'nq', 'cn' => '那曲', 'py' => 'naqu', ), 'nt' => array ( 'en' => 'nt', 'cn' => '南通', 'py' => 'nantong', ), 'neijiang' => array ( 'en' => 'nu', 'cn' => '内江', 'py' => 'neijiang', ), 'huaxian' => array ( 'en' => 'nx', 'cn' => '滑县', 'py' => 'huaxian', ), 'nanyang' => array ( 'en' => 'ny', 'cn' => '南阳', 'py' => 'nanyang', ), 'od' => array ( 'en' => 'od', 'cn' => '荷兰', 'py' => 'helan', ), 'yongcheng' => array ( 'en' => 'og', 'cn' => '永城', 'py' => 'yongcheng', ), 'longnan' => array ( 'en' => 'on', 'cn' => '陇南', 'py' => 'longnan', ), 'songyuan' => array ( 'en' => 'oy', 'cn' => '松原', 'py' => 'songyuan', ), 'pds' => array ( 'en' => 'pd', 'cn' => '平顶山', 'py' => 'pingdingshan', ), 'puer' => array ( 'en' => 'pe', 'cn' => '普洱', 'py' => 'puer', ), 'panjin' => array ( 'en' => 'pj', 'cn' => '盘锦', 'py' => 'panjin', ), 'pingliang' => array ( 'en' => 'pl', 'cn' => '平凉', 'py' => 'pingliang', ), 'poyang' => array ( 'en' => 'po', 'cn' => '鄱阳', 'py' => 'poyang', ), 'putian' => array ( 'en' => 'pu', 'cn' => '莆田', 'py' => 'putian', ), 'pingxiang' => array ( 'en' => 'px', 'cn' => '萍乡', 'py' => 'pingxiang', ), 'py' => array ( 'en' => 'py', 'cn' => '葡萄牙', 'py' => 'putaoya', ), 'puyang' => array ( 'en' => 'pz', 'cn' => '濮阳', 'py' => 'puyang', ), 'pzh' => array ( 'en' => 'pzh', 'cn' => '攀枝花', 'py' => 'panzhihua', ), 'qianjiang' => array ( 'en' => 'qa', 'cn' => '潜江', 'py' => 'qianjiang', ), 'qiannan' => array ( 'en' => 'qb', 'cn' => '黔南布依族苗族自治州', 'py' => 'qiannan', ), 'qichun' => array ( 'en' => 'qc', 'cn' => '蕲春', 'py' => 'qichun', ), 'qd' => array ( 'en' => 'qd', 'cn' => '青岛', 'py' => 'qingdao', ), 'qingyang' => array ( 'en' => 'qg', 'cn' => '庆阳', 'py' => 'qingyang', ), 'qhd' => array ( 'en' => 'qhd', 'cn' => '秦皇岛', 'py' => 'qinhuangdao', ), 'qinzhou' => array ( 'en' => 'qinzhou', 'cn' => '钦州', 'py' => 'qinzhou', ), 'qujing' => array ( 'en' => 'qj', 'cn' => '曲靖', 'py' => 'qujing', ), 'qiann' => array ( 'en' => 'qn', 'cn' => '黔南', 'py' => 'qiannan', ), 'qidong' => array ( 'en' => 'qo', 'cn' => '启东', 'py' => 'qidong', ), 'qqhe' => array ( 'en' => 'qq', 'cn' => '齐齐哈尔', 'py' => 'qiqihaer', ), 'qth' => array ( 'en' => 'qt', 'cn' => '七台河', 'py' => 'qitaihe', ), 'quanzhou' => array ( 'en' => 'quanzhou', 'cn' => '泉州', 'py' => 'quanzhou', ), 'quzhou' => array ( 'en' => 'qw', 'cn' => '衢州', 'py' => 'quzhou', ), 'qianxn' => array ( 'en' => 'qx', 'cn' => '黔西南', 'py' => 'qianxinan', ), 'qingyuan' => array ( 'en' => 'qy', 'cn' => '清远', 'py' => 'qingyuan', ), 'rb' => array ( 'en' => 'rb', 'cn' => '日本', 'py' => 'riben', ), 'huairen' => array ( 'en' => 'rh', 'cn' => '怀仁', 'py' => 'huairen', ), 'ruijin' => array ( 'en' => 'rj', 'cn' => '瑞金', 'py' => 'ruijin', ), 'rikaze' => array ( 'en' => 'rk', 'cn' => '日喀则', 'py' => 'rikaze', ), 'ruzhou' => array ( 'en' => 'ru', 'cn' => '汝州', 'py' => 'ruzhou', ), 'rizhao' => array ( 'en' => 'rz', 'cn' => '日照', 'py' => 'rizhao', ), 'sanya' => array ( 'en' => 'sanya', 'cn' => '三亚', 'py' => 'sanya', ), 'shaoyang' => array ( 'en' => 'sb', 'cn' => '邵阳', 'py' => 'shaoyang', ), 'sc' => array ( 'en' => 'sc', 'cn' => '四川', 'py' => 'sichuan', ), 'sd' => array ( 'en' => 'sd', 'cn' => '济南', 'py' => 'jinan', ), 'shuozhou' => array ( 'en' => 'se', 'cn' => '朔州', 'py' => 'shuozhou', ), 'szs' => array ( 'en' => 'sf', 'cn' => '石嘴山', 'py' => 'shizuishan', ), 'shaoguan' => array ( 'en' => 'sg', 'cn' => '韶关', 'py' => 'shaoguan', ), 'sh' => array ( 'en' => 'sh', 'cn' => '上海', 'py' => 'shanghai', ), 'shantou' => array ( 'en' => 'shantou', 'cn' => '汕头', 'py' => 'shantou', ), 'shaoxing' => array ( 'en' => 'shaoxing', 'cn' => '绍兴', 'py' => 'shaoxing', ), 'shiyan' => array ( 'en' => 'si', 'cn' => '十堰', 'py' => 'shiyan', ), 'sjz' => array ( 'en' => 'sjz', 'cn' => '石家庄', 'py' => 'shijiazhuang', ), 'sys' => array ( 'en' => 'sk', 'cn' => '双鸭山', 'py' => 'shuangyashan', ), 'shannan' => array ( 'en' => 'sl', 'cn' => '山南', 'py' => 'shannan', ), 'shangqiu' => array ( 'en' => 'sm', 'cn' => '商丘', 'py' => 'shangqiu', ), 'siping' => array ( 'en' => 'sp', 'cn' => '四平', 'py' => 'siping', ), 'suqian' => array ( 'en' => 'sq', 'cn' => '宿迁', 'py' => 'suqian', ), 'shangrao' => array ( 'en' => 'sr', 'cn' => '上饶', 'py' => 'shangrao', ), 'jms' => array ( 'en' => 'ss', 'cn' => '佳木斯', 'py' => 'jiamusi', ), 'suining' => array ( 'en' => 'suining', 'cn' => '遂宁', 'py' => 'suining', ), 'suzhou' => array ( 'en' => 'suzhou', 'cn' => '苏州', 'py' => 'suzhou', ), 'suihua' => array ( 'en' => 'sv', 'cn' => '绥化', 'py' => 'suihua', ), 'shanwei' => array ( 'en' => 'sw', 'cn' => '汕尾', 'py' => 'shanwei', ), 'sx' => array ( 'en' => 'sx', 'cn' => '西安', 'py' => 'xian', ), 'sy' => array ( 'en' => 'sy', 'cn' => '沈阳', 'py' => 'shenyang', ), 'sz' => array ( 'en' => 'sz', 'cn' => '深圳', 'py' => 'shenzhen', ), 'taian' => array ( 'en' => 'taian', 'cn' => '泰安', 'py' => 'taian', ), 'taizhou' => array ( 'en' => 'taizhou', 'cn' => '台州', 'py' => 'taizhou', ), 'ts' => array ( 'en' => 'tangshan', 'cn' => '唐山', 'py' => 'tangshan', ), 'tz' => array ( 'en' => 'tb', 'cn' => '泰州', 'py' => 'taizhou', ), 'taicang' => array ( 'en' => 'tc', 'cn' => '太仓', 'py' => 'taicang', ), 'td' => array ( 'en' => 'td', 'cn' => '泰国', 'py' => 'taiguo', ), 'tongchuan' => array ( 'en' => 'te', 'cn' => '铜川', 'py' => 'tongchuan', ), 'tonghua' => array ( 'en' => 'th', 'cn' => '通化', 'py' => 'tonghua', ), 'tianshui' => array ( 'en' => 'ti', 'cn' => '天水', 'py' => 'tianshui', ), 'tj' => array ( 'en' => 'tj', 'cn' => '天津', 'py' => 'tianjin', ), 'tieling' => array ( 'en' => 'tl', 'cn' => '铁岭', 'py' => 'tieling', ), 'tianmen' => array ( 'en' => 'tm', 'cn' => '天门', 'py' => 'tianmen', ), 'tongliao' => array ( 'en' => 'tn', 'cn' => '通辽', 'py' => 'tongliao', ), 'tongling' => array ( 'en' => 'to', 'cn' => '铜陵', 'py' => 'tongling', ), 'tongren' => array ( 'en' => 'tr', 'cn' => '铜仁', 'py' => 'tongren', ), 'taixing' => array ( 'en' => 'tx', 'cn' => '泰兴', 'py' => 'taixing', ), 'shanxi' => array ( 'en' => 'ty', 'cn' => '太原', 'py' => 'taiyuan', ), 'huangnan' => array ( 'en' => 'ua', 'cn' => '黄南', 'py' => 'huangnan', ), 'yl' => array ( 'en' => 'ub', 'cn' => '榆林', 'py' => 'yulin', ), 'xuancheng' => array ( 'en' => 'uc', 'cn' => '宣城', 'py' => 'xuancheng', ), 'suizhong' => array ( 'en' => 'uh', 'cn' => '绥中', 'py' => 'suizhong', ), 'suizhou' => array ( 'en' => 'ui', 'cn' => '随州', 'py' => 'suizhou', ), 'wlcb' => array ( 'en' => 'ul', 'cn' => '乌兰察布', 'py' => 'wulanchabu', ), 'la' => array ( 'en' => 'un', 'cn' => '六安', 'py' => 'la', ), 'shangluo' => array ( 'en' => 'uo', 'cn' => '商洛', 'py' => 'shangluo', ), 'yushu' => array ( 'en' => 'ur', 'cn' => '玉树', 'py' => 'yushu', ), 'susong' => array ( 'en' => 'us', 'cn' => '宿松', 'py' => 'susong', ), 'hancheng' => array ( 'en' => 'uu', 'cn' => '韩城', 'py' => 'hancheng', ), 'szhou' => array ( 'en' => 'uz', 'cn' => '宿州', 'py' => 'suzhou', ), 'wuhai' => array ( 'en' => 'wa', 'cn' => '乌海', 'py' => 'wuhai', ), 'wuzhong' => array ( 'en' => 'wb', 'cn' => '吴中', 'py' => 'wuzhong', ), 'weifang' => array ( 'en' => 'weifang', 'cn' => '潍坊', 'py' => 'weifang', ), 'weihai' => array ( 'en' => 'weihai', 'cn' => '威海', 'py' => 'weihai', ), 'wh' => array ( 'en' => 'wh', 'cn' => '武汉', 'py' => 'wuhan', ), 'wujiang' => array ( 'en' => 'wj', 'cn' => '吴江', 'py' => 'wujiang', ), 'wlht' => array ( 'en' => 'wl', 'cn' => '乌兰浩特', 'py' => 'wulanhaote', ), 'weinan' => array ( 'en' => 'wn', 'cn' => '渭南', 'py' => 'weinan', ), 'wuzhou' => array ( 'en' => 'wo', 'cn' => '梧州', 'py' => 'wuzhou', ), 'wjq' => array ( 'en' => 'wq', 'cn' => '五家渠', 'py' => 'wujiaqu', ), 'wenshan' => array ( 'en' => 'ws', 'cn' => '文山', 'py' => 'wenshan', ), 'wuhu' => array ( 'en' => 'wu', 'cn' => '芜湖', 'py' => 'wuhu', ), 'wuwei' => array ( 'en' => 'ww', 'cn' => '武威', 'py' => 'wuwei', ), 'wx' => array ( 'en' => 'wx', 'cn' => '无锡', 'py' => 'wuxi', ), 'wenzhou' => array ( 'en' => 'wz', 'cn' => '温州', 'py' => 'wenzhou', ), 'xingtai' => array ( 'en' => 'xa', 'cn' => '邢台', 'py' => 'xingtai', ), 'xinyang' => array ( 'en' => 'xb', 'cn' => '信阳', 'py' => 'xinyang', ), 'xinzhou' => array ( 'en' => 'xc', 'cn' => '忻州', 'py' => 'xinzhou', ), 'xianning' => array ( 'en' => 'xd', 'cn' => '咸宁', 'py' => 'xianning', ), 'xam' => array ( 'en' => 'xe', 'cn' => '兴安盟', 'py' => 'xinganmeng', ), 'xiangfan' => array ( 'en' => 'xf', 'cn' => '襄阳', 'py' => 'xiangyang', ), 'xingyi' => array ( 'en' => 'xg', 'cn' => '兴义', 'py' => 'xingyi', ), 'xiaogan' => array ( 'en' => 'xh', 'cn' => '孝感', 'py' => 'xiaogan', ), 'lasa' => array ( 'en' => 'xi', 'cn' => '西藏', 'py' => 'xizang', ), 'xiangtan' => array ( 'en' => 'xiangtan', 'cn' => '湘潭', 'py' => 'xiangtan', ), 'xining' => array ( 'en' => 'xining', 'cn' => '西宁', 'py' => 'xining', ), 'wlmq' => array ( 'en' => 'xj', 'cn' => '新疆', 'py' => 'xinjiang', ), 'haixi' => array ( 'en' => 'xk', 'cn' => '海西', 'py' => 'haixi', ), 'xl' => array ( 'en' => 'xl', 'cn' => '新西兰', 'py' => 'xinxilan', ), 'xm' => array ( 'en' => 'xm', 'cn' => '厦门', 'py' => 'xiamen', ), 'xinyu' => array ( 'en' => 'xo', 'cn' => '新余', 'py' => 'xinyu', ), 'xp' => array ( 'en' => 'xp', 'cn' => '新加坡', 'py' => 'xinjiapo', ), 'xincai' => array ( 'en' => 'xq', 'cn' => '新蔡', 'py' => 'xincai', ), 'xsbn' => array ( 'en' => 'xs', 'cn' => '西双版纳', 'py' => 'xishuangbanna', ), 'xuchang' => array ( 'en' => 'xu', 'cn' => '许昌', 'py' => 'xuchang', ), 'xinxiang' => array ( 'en' => 'xx', 'cn' => '新乡', 'py' => 'xinxiang', ), 'xianyang' => array ( 'en' => 'xy', 'cn' => '咸阳', 'py' => 'xianyang', ), 'xz' => array ( 'en' => 'xz', 'cn' => '徐州', 'py' => 'xuzhou', ), 'yancheng' => array ( 'en' => 'ya', 'cn' => '盐城', 'py' => 'yancheng', ), 'yangzhou' => array ( 'en' => 'yd', 'cn' => '扬州', 'py' => 'yangzhou', ), 'yanji' => array ( 'en' => 'ye', 'cn' => '延吉', 'py' => 'yanji', ), 'yunfu' => array ( 'en' => 'yf', 'cn' => '云浮', 'py' => 'yunfu', ), 'lyg' => array ( 'en' => 'yg', 'cn' => '连云港', 'py' => 'lianyugang', ), 'yaan' => array ( 'en' => 'yh', 'cn' => '雅安', 'py' => 'yaan', ), 'yibin' => array ( 'en' => 'yibin', 'cn' => '宜宾', 'py' => 'yibin', ), 'yichang' => array ( 'en' => 'yichang', 'cn' => '宜昌', 'py' => 'yichang', ), 'yinchuan' => array ( 'en' => 'yinchuan', 'cn' => '银川', 'py' => 'yinchuan', ), 'yiyang' => array ( 'en' => 'yiyang', 'cn' => '益阳', 'py' => 'yiyang', ), 'yangjiang' => array ( 'en' => 'yj', 'cn' => '阳江', 'py' => 'yangjiang', ), 'yingkou' => array ( 'en' => 'yk', 'cn' => '营口', 'py' => 'yingkou', ), 'yulin' => array ( 'en' => 'yl', 'cn' => '玉林', 'py' => 'yulin', ), 'yichun' => array ( 'en' => 'ym', 'cn' => '伊春', 'py' => 'yichun', ), 'yn' => array ( 'en' => 'yn', 'cn' => '昆明', 'py' => 'kunming', ), 'yc' => array ( 'en' => 'yo', 'cn' => '宜春', 'py' => 'yichun', ), 'yongzhou' => array ( 'en' => 'yongzhou', 'cn' => '永州', 'py' => 'yongzhou', ), 'yanbian' => array ( 'en' => 'yp', 'cn' => '延边', 'py' => 'yanbian', ), 'yangquan' => array ( 'en' => 'yq', 'cn' => '阳泉', 'py' => 'yangquan', ), 'yingtan' => array ( 'en' => 'yr', 'cn' => '鹰潭', 'py' => 'yingtan', ), 'yuxi' => array ( 'en' => 'ys', 'cn' => '玉溪', 'py' => 'yuxi', ), 'yt' => array ( 'en' => 'yt', 'cn' => '烟台', 'py' => 'yantai', ), 'yuncheng' => array ( 'en' => 'yu', 'cn' => '运城', 'py' => 'yuncheng', ), 'yueyang' => array ( 'en' => 'yueyang', 'cn' => '岳阳', 'py' => 'yueyang', ), 'yiwu' => array ( 'en' => 'yw', 'cn' => '义乌', 'py' => 'yiwu', ), 'yx' => array ( 'en' => 'yx', 'cn' => '宜兴', 'py' => 'yixing', ), 'zb' => array ( 'en' => 'zb', 'cn' => '淄博', 'py' => 'zibo', ), 'zhanjiang' => array ( 'en' => 'zc', 'cn' => '湛江', 'py' => 'zhanjiang', ), 'zhenjiang' => array ( 'en' => 'zd', 'cn' => '镇江', 'py' => 'zhenjiang', ), 'zhoushan' => array ( 'en' => 'ze', 'cn' => '舟山', 'py' => 'zhoushan', ), 'zs' => array ( 'en' => 'zhongshan', 'cn' => '中山', 'py' => 'zhongshan', ), 'zh' => array ( 'en' => 'zhuhai', 'cn' => '珠海', 'py' => 'zhuhai', ), 'yanan' => array ( 'en' => 'zi', 'cn' => '延安', 'py' => 'yanan', ), 'zigong' => array ( 'en' => 'zigong', 'cn' => '自贡', 'py' => 'zigong', ), 'zjj' => array ( 'en' => 'zjj', 'cn' => '张家界', 'py' => 'zhangjiajie', ), 'zjk' => array ( 'en' => 'zjk', 'cn' => '张家口', 'py' => 'zhangjiakou', ), 'zhoukou' => array ( 'en' => 'zk', 'cn' => '周口', 'py' => 'zhoukou', ), 'gzl' => array ( 'en' => 'zl', 'cn' => '公主岭', 'py' => 'gongzhuling', ), 'zmd' => array ( 'en' => 'zm', 'cn' => '驻马店', 'py' => 'zhumadian', ), 'zhangye' => array ( 'en' => 'zn', 'cn' => '张掖', 'py' => 'zhangye', ), 'zhangzhou' => array ( 'en' => 'zo', 'cn' => '漳州', 'py' => 'zhangzhou', ), 'zhuji' => array ( 'en' => 'zp', 'cn' => '诸暨', 'py' => 'zhuji', ), 'zhaoqing' => array ( 'en' => 'zq', 'cn' => '肇庆', 'py' => 'zhaoqing', ), 'ziyang' => array ( 'en' => 'zr', 'cn' => '资阳', 'py' => 'ziyang', ), 'zhaotong' => array ( 'en' => 'zt', 'cn' => '昭通', 'py' => 'zhaotong', ), 'zaozhuang' => array ( 'en' => 'zu', 'cn' => '枣庄', 'py' => 'zaozhuang', ), 'zhongwei' => array ( 'en' => 'zw', 'cn' => '中卫', 'py' => 'zhongwei', ), 'zunyi' => array ( 'en' => 'zy', 'cn' => '遵义', 'py' => 'zunyi', ), 'zz' => array ( 'en' => 'zz', 'cn' => '株洲', 'py' => 'zhuzhou', ), ), 'DIRECT' => array ( 'bj' => array ( 'cn' => '北京', 'pub' => 'bj', 'id' => 5894622582984222727, ), 'beihai' => array ( 'cn' => '北海', 'pub' => 'beihai', 'id' => 5894622627842304020, ), 'nc' => array ( 'cn' => '南昌', 'pub' => 'nc', 'id' => 5894622793924159568, ), 'wuhu' => array ( 'cn' => '芜湖', 'pub' => 'wuhu', 'id' => 5894622817248684120, ), 'hf' => array ( 'cn' => '合肥', 'pub' => 'hf', 'id' => 5894622820037896281, ), 'guilin' => array ( 'cn' => '桂林', 'pub' => 'guilin', 'id' => 5894622825628903515, ), 'ks' => array ( 'cn' => '昆山', 'pub' => 'ks', 'id' => 5894622831685478493, ), 'tangshan' => array ( 'cn' => '唐山', 'pub' => 'tangshan', 'id' => 5894622834474690654, ), 'cq' => array ( 'cn' => '重庆', 'pub' => 'cq', 'id' => 5894622840061503584, ), 'wx' => array ( 'cn' => '无锡', 'pub' => 'wx', 'id' => 5894622842863298657, ), 'cz' => array ( 'cn' => '常州', 'pub' => 'cz', 'id' => 5894622845681870946, ), 'wlmq' => array ( 'cn' => '乌鲁木齐', 'pub' => 'wlmq', 'id' => 5894622848487860323, ), 'yt' => array ( 'cn' => '烟台', 'pub' => 'yt', 'id' => 5894622854070478949, ), 'weihai' => array ( 'cn' => '威海', 'pub' => 'weihai', 'id' => 5894622856859691110, ), 'shanxi' => array ( 'cn' => '太原', 'pub' => 'shanxi', 'id' => 5894622859657291879, ), 'zhongshan' => array ( 'cn' => '中山', 'pub' => 'zhongshan', 'id' => 5894622876493228141, ), 'gx' => array ( 'cn' => '广西', 'pub' => 'gx', 'id' => 5894622910085408889, ), 'zhuhai' => array ( 'cn' => '珠海', 'pub' => 'zhuhai', 'id' => 5894622912883009658, ), 'sx' => array ( 'cn' => '陕西', 'pub' => 'sx', 'id' => 5894622915676416123, ), 'nb' => array ( 'cn' => '宁波', 'pub' => 'nb', 'id' => 5894622918482405500, ), 'cs' => array ( 'cn' => '长沙', 'pub' => 'cs', 'id' => 5894622921330337917, ), 'sjz' => array ( 'cn' => '石家庄', 'pub' => 'sjz', 'id' => 5894622924371208318, ), 'sc' => array ( 'cn' => '成都', 'pub' => 'sc', 'id' => 5894622927168809087, ), 'sd' => array ( 'cn' => '济南', 'pub' => 'sd', 'id' => 5894622944197683333, ), 'nt' => array ( 'cn' => '南通', 'pub' => 'nt', 'id' => 5894622947012061318, ), 'hn' => array ( 'cn' => '郑州', 'pub' => 'hn', 'id' => 5894622949797079175, ), 'dl' => array ( 'cn' => '大连', 'pub' => 'dl', 'id' => 5894622952590485640, ), 'qd' => array ( 'cn' => '青岛', 'pub' => 'qd', 'id' => 5894622955409057929, ), 'sh' => array ( 'cn' => '上海', 'pub' => 'sh', 'id' => 5894622958202464394, ), 'tj' => array ( 'cn' => '天津', 'pub' => 'tj', 'id' => 5894622961008453771, ), 'sz' => array ( 'cn' => '深圳', 'pub' => 'sz', 'id' => 5894622963806054540, ), 'gz' => array ( 'cn' => '广州', 'pub' => 'gz', 'id' => 5894622966603655309, ), 'hz' => array ( 'cn' => '杭州', 'pub' => 'hz', 'id' => 5894622969405450382, ), 'wh' => array ( 'cn' => '武汉', 'pub' => 'wh', 'id' => 5894622975000651920, ), 'suzhou' => array ( 'cn' => '苏州', 'pub' => 'suzhou', 'id' => 5894622977798252689, ), 'nj' => array ( 'cn' => '南京', 'pub' => 'nj', 'id' => 5894622980591659154, ), 'fs' => array ( 'cn' => '佛山', 'pub' => 'fs', 'id' => 5894623017350539423, ), 'huizhou' => array ( 'cn' => '惠州', 'pub' => 'huizhou', 'id' => 5894623020181694624, ), 'dg' => array ( 'cn' => '东莞', 'pub' => 'dg', 'id' => 5894623022996072609, ), 'h' => array ( 'cn' => '哈尔滨', 'pub' => 'h', 'id' => 5894623062548359343, ), 'cc' => array ( 'cn' => '长春', 'pub' => 'cc', 'id' => 5894623065597618352, ), 'sy' => array ( 'cn' => '沈阳', 'pub' => 'sy', 'id' => 5894623068630100145, ), 'sanya' => array ( 'cn' => '三亚', 'pub' => 'sanya', 'id' => 5894623071436089522, ), 'boao' => array ( 'cn' => '博鳌', 'pub' => 'boao', 'id' => 5894623074476959923, ), 'han' => array ( 'cn' => '海南', 'pub' => 'han', 'id' => 5894623077274560692, ), 'kaifeng' => array ( 'cn' => '开封', 'pub' => 'kaifeng', 'id' => 5894623080067967157, ), 'jiangmen' => array ( 'cn' => '江门', 'pub' => 'jiangmen', 'id' => 5894623088490129592, ), 'zhaoqing' => array ( 'cn' => '肇庆', 'pub' => 'zhaoqing', 'id' => 5894623091283536057, ), 'huangshan' => array ( 'cn' => '黄山', 'pub' => 'huangshan', 'id' => 5894623096899709115, ), 'yn' => array ( 'cn' => '云南', 'pub' => 'yn', 'id' => 5894623099718281404, ), 'fushun' => array ( 'cn' => '抚顺', 'pub' => 'fushun', 'id' => 5894623102520076477, ), 'anshan' => array ( 'cn' => '鞍山', 'pub' => 'anshan', 'id' => 5894623105321871550, ), 'guizhou' => array ( 'cn' => '贵阳', 'pub' => 'guizhou', 'id' => 5894623110959016128, ), 'jiangyin' => array ( 'cn' => '江阴', 'pub' => 'jiangyin', 'id' => 5894623125018323141, ), 'qhd' => array ( 'cn' => '秦皇岛', 'pub' => 'qhd', 'id' => 5894623131125229767, ), 'baoding' => array ( 'cn' => '保定', 'pub' => 'baoding', 'id' => 5894623136967895241, ), 'hhht' => array ( 'cn' => '呼和浩特', 'pub' => 'hhht', 'id' => 5894623165082314963, ), 'bt' => array ( 'cn' => '包头', 'pub' => 'bt', 'id' => 5894623167905081556, ), 'xm' => array ( 'cn' => '厦门', 'pub' => 'xm', 'id' => 5894623184950733018, ), 'xz' => array ( 'cn' => '徐州', 'pub' => 'xz', 'id' => 5894623193385478365, ), 'yinchuan' => array ( 'cn' => '银川', 'pub' => 'yinchuan', 'id' => 5894623252525164786, ), 'lanzhou' => array ( 'cn' => '兰州', 'pub' => 'lanzhou', 'id' => 5894623258137143540, ), 'luoyang' => array ( 'cn' => '洛阳', 'pub' => 'luoyang', 'id' => 5894623270061549816, ), 'fj' => array ( 'cn' => '福州', 'pub' => 'fj', 'id' => 5894623300495419650, ), 'xianyang' => array ( 'cn' => '咸阳', 'pub' => 'xianyang', 'id' => 5894623312675678471, ), 'yangjiang' => array ( 'cn' => '阳江', 'pub' => 'yangjiang', 'id' => 5894623579290806618, ), 'macao' => array ( 'cn' => '澳门', 'pub' => 'macao', 'id' => 5894623599515740512, ), 'qingyuan' => array ( 'cn' => '清远', 'pub' => 'qingyuan', 'id' => 5894623628791982441, ), 'tieling' => array ( 'cn' => '铁岭', 'pub' => 'tieling', 'id' => 5894623728238930312, ), 'jinzhou' => array ( 'cn' => '锦州', 'pub' => 'jinzhou', 'id' => 5894623734580717962, ), ), ), 'DICT' => array ( 'GUEST' => array ( 'uid' => 0, 'username' => '乐居网友', 'headurl' => 'http://cdn.leju.com/comment-fe/img/user.png', 'ctime' => 946656000, ), 'KNOWLEDGE' => array ( 'STATUS' => array ( 9 => array ( 'id' => 9, 'name' => '已发布', 'class' => 'l_grn2', ), 2 => array ( 'id' => 2, 'name' => '定时发布', 'class' => 'l_grn1', ), 1 => array ( 'id' => 1, 'name' => '草稿', 'class' => 'l_org', ), 0 => array ( 'id' => 0, 'name' => '未发布', 'class' => 'l_gray', ), -1 => array ( 'id' => -1, 'name' => '已删除', 'class' => 'l_red', ), ), 'TYPES' => array ( 0 => array ( 'id' => 0, 'name' => '原创', 'class' => '', ), 2 => array ( 'id' => 2, 'name' => '转载', 'class' => '', ), 1 => array ( 'id' => 1, 'name' => '收录', 'class' => '', ), ), 'FLAGS' => array ( 'focus' => array ( 'id' => 1, 'flag' => 'focus', 'name' => '首页焦点图', ), 'top' => array ( 'id' => 2, 'flag' => 'top', 'name' => '栏目列表置顶', ), ), ), 'WIKI' => array ( 'BUSINESS_LINES' => array ( 1 => array ( 'id' => '1', 'name' => '新房', ), 2 => array ( 'id' => '2', 'name' => '二手房', ), 3 => array ( 'id' => '3', 'name' => '家居', ), 4 => array ( 'id' => '4', 'name' => '抢工长', ), ), 'CATE' => array ( 0 => array ( 'id' => '0', 'name' => '普通', ), 1 => array ( 'id' => '1', 'name' => '企业', ), 2 => array ( 'id' => '2', 'name' => '人物', ), ), 'STATUS' => array ( 9 => array ( 'id' => '9', 'name' => '已发布', 'class' => '', ), 2 => array ( 'id' => '2', 'name' => '定时发布', 'class' => '', ), 1 => array ( 'id' => '1', 'name' => '草稿', 'class' => '', ), 0 => array ( 'id' => '0', 'name' => '未发布', 'class' => '', ), -1 => array ( 'id' => '-1', 'name' => '已删除', 'class' => '', ), ), 'SOURCE' => array ( 0 => array ( 'id' => '0', 'name' => '原创', ), 1 => array ( 'id' => '1', 'name' => '收录', ), 2 => array ( 'id' => '2', 'name' => 'CRIC', ), ), 'SORT' => array ( 0 => array ( 'id' => '0', 'name' => '最少', ), 1 => array ( 'id' => '1', 'name' => '最多', ), ), 'FLAGS' => array ( 'wiki_focus' => array ( 'id' => 1, 'flag' => 'wiki_focus', 'name' => '首页焦点图', ), 'wiki_person' => array ( 'id' => 2, 'flag' => 'wiki_person', 'name' => '首页名人', ), 'wiki_company' => array ( 'id' => 3, 'flag' => 'wiki_company', 'name' => '首页名企', ), ), 'BASIC' => array ( 1 => array ( 'enname' => array ( 'title' => '外文名', 'name' => 'enname', ), 'stname' => array ( 'title' => '简称', 'name' => 'stname', ), 'ctime' => array ( 'title' => '创建时间', 'name' => 'ctime', 'show' => 'showtime', ), 'city' => array ( 'title' => '城市', 'name' => 'city', ), 'homepage' => array ( 'title' => '官方网站', 'name' => 'homepage', ), 'listmarket' => array ( 'title' => '上市市场', 'name' => 'listmarket', ), ), 2 => array ( 'cnname' => array ( 'title' => '中文名称', 'name' => 'cnname', ), 'position' => array ( 'title' => '职位', 'name' => 'position', ), 'birthday' => array ( 'title' => '出生日期', 'name' => 'birthday', 'show' => 'showtime', ), 'nationality' => array ( 'title' => '国籍', 'name' => 'nationality', ), 'nativeplace' => array ( 'title' => '籍贯', 'name' => 'nativeplace', ), 'birthplace' => array ( 'title' => '出生地', 'name' => 'birthplace', ), 'nation' => array ( 'title' => '民族', 'name' => 'nation', ), 'sex' => array ( 'title' => '性别', 'name' => 'sex', ), 'college' => array ( 'title' => '毕业院校', 'name' => 'college', 'verify_len30' => true, ), 'representative' => array ( 'title' => '代表作品', 'name' => 'representative', 'verify_len30' => true, ), 'honour' => array ( 'title' => '所获荣誉', 'name' => 'honour', 'verify_len30' => true, ), 'achievement' => array ( 'title' => '主要成就', 'name' => 'achievement', 'verify_len30' => true, ), ), ), 'LISTMARKET' => array ( 'SH' => array ( 'id' => 'SH', 'name' => '上交所', ), 'SZ' => array ( 'id' => 'SZ', 'name' => '深交所', ), 'HK' => array ( 'id' => 'HK', 'name' => '港交所', ), ), 'BASIC_SEX' => array ( 1 => array ( 'name' => '男', 'value' => 1, ), 0 => array ( 'name' => '女', 'value' => 0, ), 2 => array ( 'name' => '其它', 'value' => 2, ), ), 'STATS_CODE' => array ( 'SHOW' => array ( 'PC' => array ( 'level1' => 'pc_fcbk', 'level2' => array ( 0 => '', 1 => 'wd_bkqy', 2 => 'wd_bkrw', ), 'level3' => array ( 0 => '', 1 => '', 2 => '', ), '_rel' => array ( 'news' => array ( 0 => '', 1 => '#wt_source=pc_bkqy_xgxw', 2 => '#wt_source=pc_bkrw_xgxw', ), 'album' => array ( 0 => '', 1 => '#wt_source=pc_bkqy_picture', 2 => '#wt_source=pc_bkrw_picture', ), 'hudong' => array ( 0 => '', 1 => '#wt_source=pc_bkqy_hdbk', 2 => '#wt_source=pc_bkrw_hdbk', ), 'companies' => array ( 0 => '', 1 => '#wt_source=pc_bkqy_xggs', 2 => '#wt_source=pc_bkrw_xggs', ), 'figures' => array ( 0 => '', 1 => '#wt_source=pc_bkqy_xgrw', 2 => '#wt_source=pc_bkrw_xgrw', ), ), ), 'TOUCH' => array ( 'level1' => 'baike', 'level2' => array ( 0 => '', 1 => 'wd_bkqy', 2 => 'wd_bkrw', ), 'level3' => array ( 0 => '', 1 => '', 2 => '', ), '_rel' => array ( 'news' => array ( 0 => '', 1 => '#ln=touch_bkqy_xgxw', 2 => '#ln=touch_bkrw_xgxw', ), 'album' => array ( 0 => '', 1 => '#ln=touch_bkqy_picture', 2 => '#ln=touch_bkrw_picture', ), ), ), ), 'ALBUM' => array ( 'PC' => array ( 'level1' => 'pc_fcbk', 'level2' => array ( 0 => '', 1 => 'wd_picture', 2 => 'wd_picture', ), 'level3' => '', ), 'TOUCH' => array ( 'level1' => 'baike', 'level2' => array ( 0 => '', 1 => 'wd_picture', 2 => 'wd_picture', ), 'level3' => '', ), ), ), ), 'ASK' => array ( 'SRC' => array ( 0 => array ( 'id' => 0, 'name' => '收录', ), 51 => array ( 'id' => 0, 'name' => 'Web', ), 101 => array ( 'id' => 0, 'name' => 'App', ), 151 => array ( 'id' => 0, 'name' => 'Wap', ), 152 => array ( 'id' => 0, 'name' => 'Wap 楼盘详情页', ), ), 'QUESTION_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '已删除', ), 11 => array ( 'id' => 11, 'name' => '待确认', ), 12 => array ( 'id' => 12, 'name' => '待审核', ), 21 => array ( 'id' => 21, 'name' => '待解决', ), 22 => array ( 'id' => 22, 'name' => '已回答', ), 23 => array ( 'id' => 23, 'name' => '已采纳', ), ), 'ANSWER_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '已删除', ), 11 => array ( 'id' => 11, 'name' => '待确认', ), 12 => array ( 'id' => 12, 'name' => '待审核', ), 21 => array ( 'id' => 21, 'name' => '待解决', ), 22 => array ( 'id' => 22, 'name' => '已置顶', ), 23 => array ( 'id' => 23, 'name' => '已采纳', ), ), ), 'LD' => array ( 'SOURCE' => array ( 0 => array ( 'id' => 0, 'name' => 'PC', ), 1 => array ( 'id' => 1, 'name' => 'WAP', ), ), 'QUESTION_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '已删除', ), 1 => array ( 'id' => 1, 'name' => '未审核', ), 2 => array ( 'id' => 2, 'name' => '已审核', ), ), 'ANSWER_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '已删除', ), 1 => array ( 'id' => 1, 'name' => '未审核', ), 2 => array ( 'id' => 2, 'name' => '已审核', ), ), 'QTOP' => array ( 0 => array ( 'id' => 0, 'name' => '未置顶', ), 1 => array ( 'id' => 1, 'name' => '已置顶', ), ), 'QESSENCE' => array ( 0 => array ( 'id' => 0, 'name' => '未精华', ), 1 => array ( 'id' => 1, 'name' => '已精华', ), ), 'COMPANY_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '未开启', ), 1 => array ( 'id' => 1, 'name' => '已开启', ), ), ), 'PN' => array ( 'SOURCE' => array ( 0 => array ( 'id' => 0, 'name' => 'PC', ), 1 => array ( 'id' => 1, 'name' => 'WAP', ), ), 'QUESTION_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '已删除', ), 1 => array ( 'id' => 1, 'name' => '未审核', ), 2 => array ( 'id' => 2, 'name' => '已审核', ), ), 'ANSWER_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '已删除', ), 1 => array ( 'id' => 1, 'name' => '未审核', ), 2 => array ( 'id' => 2, 'name' => '已审核', ), ), 'QTOP' => array ( 0 => array ( 'id' => 0, 'name' => '未置顶', ), 1 => array ( 'id' => 1, 'name' => '已置顶', ), ), 'QESSENCE' => array ( 0 => array ( 'id' => 0, 'name' => '未精华', ), 1 => array ( 'id' => 1, 'name' => '已精华', ), ), 'PERSON_STATUS' => array ( 0 => array ( 'id' => 0, 'name' => '未开启', ), 1 => array ( 'id' => 1, 'name' => '已开启', ), ), ), ), 'AUTH_ROUTE' => array ( 0 => array ( 'all' => true, 'special' => true, 'tag' => '知识管理', 'tag_en' => 'knowledge', 'child' => array ( 0 => array ( 'tag' => '知识管理', 'auth' => array ( 0 => array ( 'auth_id' => 'list', 'auth_tag' => '查看', 'classname' => 'list', ), 1 => array ( 'auth_id' => 'add', 'auth_tag' => '添加', 'classname' => 'add', ), 2 => array ( 'auth_id' => 'edit', 'auth_tag' => '修改', 'classname' => 'edit', ), 3 => array ( 'auth_id' => 'del', 'auth_tag' => '删除', 'classname' => 'del', ), ), ), ), ), 1 => array ( 'all' => true, 'special' => true, 'tag' => '问答管理', 'tag_en' => 'question', 'child' => array ( 0 => array ( 'tag' => '问答管理', 'auth' => array ( 0 => array ( 'auth_id' => 'list', 'auth_tag' => '查看', 'classname' => 'list', ), 1 => array ( 'auth_id' => 'add', 'auth_tag' => '添加', 'classname' => 'add', ), 2 => array ( 'auth_id' => 'edit', 'auth_tag' => '修改', 'classname' => 'edit', ), 3 => array ( 'auth_id' => 'del', 'auth_tag' => '删除', 'classname' => 'del', ), ), ), ), ), 2 => array ( 'all' => false, 'special' => false, 'tag' => '词条管理', 'tag_en' => 'wiki', 'child' => array ( 0 => array ( 'tag' => '词条管理', 'auth' => array ( 0 => array ( 'auth_id' => 'list', 'auth_tag' => '查看', 'classname' => 'list', ), 1 => array ( 'auth_id' => 'add', 'auth_tag' => '添加', 'classname' => 'add', ), 2 => array ( 'auth_id' => 'edit', 'auth_tag' => '修改', 'classname' => 'edit', ), 3 => array ( 'auth_id' => 'del', 'auth_tag' => '删除', 'classname' => 'del', ), ), ), ), ), 3 => array ( 'all' => true, 'special' => false, 'tag' => '权限管理', 'tag_en' => 'role', 'child' => array ( 0 => array ( 'tag' => '角色管理', 'auth' => array ( 0 => array ( 'auth_id' => 'list', 'auth_tag' => '查看', 'classname' => 'list', ), 1 => array ( 'auth_id' => 'add', 'auth_tag' => '添加', 'classname' => 'add', ), 2 => array ( 'auth_id' => 'edit', 'auth_tag' => '修改', 'classname' => 'edit', ), 3 => array ( 'auth_id' => 'del', 'auth_tag' => '删除', 'classname' => 'del', ), ), ), 1 => array ( 'tag' => '用户管理', 'auth' => array ( 0 => array ( 'auth_id' => 'userlist', 'auth_tag' => '查看', 'classname' => 'list', ), 1 => array ( 'auth_id' => 'useradd', 'auth_tag' => '添加', 'classname' => 'add', ), 2 => array ( 'auth_id' => 'useredit', 'auth_tag' => '修改', 'classname' => 'edit', ), 3 => array ( 'auth_id' => 'userdel', 'auth_tag' => '删除', 'classname' => 'del', ), ), ), ), ), 4 => array ( 'all' => false, 'special' => false, 'tag' => '栏目管理', 'tag_en' => 'cate', 'child' => array ( 0 => array ( 'tag' => '知识栏目', 'auth' => array ( 0 => array ( 'auth_id' => 'list', 'auth_tag' => '查看', 'classname' => 'list', ), 1 => array ( 'auth_id' => 'add', 'auth_tag' => '添加', 'classname' => 'add', ), 2 => array ( 'auth_id' => 'edit', 'auth_tag' => '修改', 'classname' => 'edit', ), 3 => array ( 'auth_id' => 'del', 'auth_tag' => '删除', 'classname' => 'del', ), ), ), 1 => array ( 'tag' => '问答栏目', 'auth' => array ( 0 => array ( 'auth_id' => 'qalist', 'auth_tag' => '查看', 'classname' => 'list', ), 1 => array ( 'auth_id' => 'qaadd', 'auth_tag' => '添加', 'classname' => 'add', ), 2 => array ( 'auth_id' => 'qaedit', 'auth_tag' => '修改', 'classname' => 'edit', ), 3 => array ( 'auth_id' => 'qadel', 'auth_tag' => '删除', 'classname' => 'del', ), ), ), ), ), 5 => array ( 'all' => false, 'special' => false, 'tag' => '推荐管理', 'tag_en' => 'recommend', 'child' => array ( 0 => array ( 'tag' => '知识', 'auth' => array ( 0 => array ( 'auth_id' => 'focus', 'auth_tag' => '焦点', 'classname' => 'focus', ), 1 => array ( 'auth_id' => 'top', 'auth_tag' => '置顶', 'classname' => 'top', ), ), ), 1 => array ( 'tag' => '百科词条', 'auth' => array ( 0 => array ( 'auth_id' => 'wiki_focus', 'auth_tag' => '首页焦点', 'classname' => 'wiki_focus', ), 1 => array ( 'auth_id' => 'wiki_person', 'auth_tag' => '名人', 'classname' => 'wiki_person', ), 2 => array ( 'auth_id' => 'wiki_company', 'auth_tag' => '名企', 'classname' => 'wiki_company', ), ), ), 2 => array ( 'tag' => '问答数据', 'auth' => array ( 0 => array ( 'auth_id' => 'qacompanytop', 'auth_tag' => '企业置顶', 'classname' => 'qacompanytop', ), ), ), ), ), 6 => array ( 'all' => false, 'special' => false, 'tag' => '审计日志管理', 'tag_en' => 'adminlogs', 'child' => array ( 0 => array ( 'tag' => '审计日志管理', 'auth' => array ( 0 => array ( 'auth_id' => 'list', 'auth_tag' => '查看', 'classname' => 'list', ), ), ), ), ), ), 'MD5_DICT' => array ( 0 => 'ก', 1 => 'ข', 2 => 'ค', 3 => 'ฆ', 4 => 'ง', 5 => 'จ', 6 => 'ฉ', 7 => 'ช', 8 => 'ซ', 9 => 'ธ', 'a' => 'ฌ', 'b' => 'ญ', 'c' => 'ฎ', 'd' => 'ฏ', 'e' => 'ฐ', 'f' => 'ฑ', 'g' => 'ฒ', 'h' => 'ณ', 'i' => 'ด', 'j' => 'ต', 'k' => 'ถ', 'l' => 'ท', 'm' => 'ฮ', 'n' => 'น', 'o' => 'บ', 'p' => 'ป', 'q' => 'ผ', 'r' => 'พ', 's' => 'ฝ', 't' => 'ฟ', 'u' => 'ภ', 'v' => 'ม', 'w' => 'ย', 'x' => 'ร', 'y' => 'ฤ', 'z' => 'ฦ', '#' => 'ㆁ', '*' => 'ㆆ', ), 'RECOMMEND' => array ( 'QA' => array ( 'acts' => array ( 'focus' => array ( 'name' => '首页图片', 'max' => 10, 'flag' => 1, 'method' => 'setRecommend', ), 'unfocus' => array ( 'name' => '取消首页图片', 'flag' => 1, 'method' => 'delRecommend', ), ), ), ), 'DOMAINS' => array ( 'PC' => 'http://baike.leju.com/', 'TOUCH' => 'http://m.baike.leju.com/', 'ADMIN' => 'http://admin.baike.leju.com/', 'API' => 'http://api.baike.leju.com/', ), 'MEMBER_CACHE' => array ( 'DETAIL_EXPIRE' => 3600, 'INFO_EXPIRE' => 86400, ), ));Think\Hook::import(array ( 'app_init' => array ( 0 => 'Behavior\\BuildLiteBehavior', ), 'app_begin' => array ( 0 => 'Behavior\\ReadHtmlCacheBehavior', ), 'app_end' => array ( 0 => 'Behavior\\ShowPageTraceBehavior', ), 'view_parse' => array ( 0 => 'Behavior\\ParseTemplateBehavior', ), 'template_filter' => array ( 0 => 'Behavior\\ContentReplaceBehavior', ), 'view_filter' => array ( 0 => 'Behavior\\WriteHtmlCacheBehavior', ), ));}